{
  "uid" : "6954ce4daddd0405",
  "name" : "POST create_docker_container_without_token",
  "fullName" : "tests_api.test_bd.TestPOST#test_post_create_docker_container_without_token",
  "historyId" : "f833256fb8ca072b26357ead25c8b408",
  "time" : {
    "start" : 1736644113768,
    "stop" : 1736644114271,
    "duration" : 503
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: Incorrect status code: 400",
  "statusTrace" : "self = <tests_api.test_bd.TestPOST object at 0x7fe7ec965a30>\n\n    @allure.title('POST create_docker_container_without_token')\n    def test_post_create_docker_container_without_token(self):\n        result = API.post_create_docker_container(token='incorrect_token')\n>       Checking.check_status_code(result, 401)\n\ntests_api/test_bd.py:404: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresult = <Response [400]>, status_code = 401\n\n    @staticmethod\n    def check_status_code(result: requests.models.Response, status_code: int):\n        \"\"\"\n        Method check status code\n        :param result: Response\n        :param status_code:\n        \"\"\"\n        with allure.step(f'Assert status code: {status_code} == Response status code: {result.status_code}'):\n>           assert status_code == result.status_code, f'Incorrect status code: {result.status_code}'\nE           AssertionError: Incorrect status code: 400\n\ntests_api/utils/checking.py:16: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: Incorrect status code: 400",
    "statusTrace" : "self = <tests_api.test_bd.TestPOST object at 0x7fe7ec965a30>\n\n    @allure.title('POST create_docker_container_without_token')\n    def test_post_create_docker_container_without_token(self):\n        result = API.post_create_docker_container(token='incorrect_token')\n>       Checking.check_status_code(result, 401)\n\ntests_api/test_bd.py:404: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresult = <Response [400]>, status_code = 401\n\n    @staticmethod\n    def check_status_code(result: requests.models.Response, status_code: int):\n        \"\"\"\n        Method check status code\n        :param result: Response\n        :param status_code:\n        \"\"\"\n        with allure.step(f'Assert status code: {status_code} == Response status code: {result.status_code}'):\n>           assert status_code == result.status_code, f'Incorrect status code: {result.status_code}'\nE           AssertionError: Incorrect status code: 400\n\ntests_api/utils/checking.py:16: AssertionError",
    "steps" : [ {
      "name" : "post_create_docker_container",
      "time" : {
        "start" : 1736644113768,
        "stop" : 1736644114271,
        "duration" : 503
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "Endpoint: /container_create",
        "time" : {
          "start" : 1736644114270,
          "stop" : 1736644114270,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      }, {
        "name" : "Request:",
        "time" : {
          "start" : 1736644114270,
          "stop" : 1736644114271,
          "duration" : 1
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "Url: https://dbend.areso.pro/container_create",
          "time" : {
            "start" : 1736644114270,
            "stop" : 1736644114270,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : false
        }, {
          "name" : "Headers: {'Content-Type': 'application/json', 'Authorization': 'incorrect_token'}",
          "time" : {
            "start" : 1736644114271,
            "stop" : 1736644114271,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : false
        }, {
          "name" : "Body: {\"docker_image\": \"nginx\", \"int_ports\": \"80\", \"env\": 3, \"region\": 3}",
          "time" : {
            "start" : 1736644114271,
            "stop" : 1736644114271,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : false
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 3,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : true
      }, {
        "name" : "Response:",
        "time" : {
          "start" : 1736644114271,
          "stop" : 1736644114271,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "Status code: 400",
          "time" : {
            "start" : 1736644114271,
            "stop" : 1736644114271,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : false
        }, {
          "name" : "JSON: {\n    \"msg_code\": -1,\n    \"msg\": \"endpoint is disabled\"\n}\n",
          "time" : {
            "start" : 1736644114271,
            "stop" : 1736644114271,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : false
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 2,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 8,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "Assert status code: 401 == Response status code: 400",
      "time" : {
        "start" : 1736644114271,
        "stop" : 1736644114271,
        "duration" : 0
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: Incorrect status code: 400\n",
      "statusTrace" : "  File \"/home/runner/work/Oblache/Oblache/tests_api/utils/checking.py\", line 16, in check_status_code\n    assert status_code == result.status_code, f'Incorrect status code: {result.status_code}'\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 10,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "suite",
    "value" : "POST"
  }, {
    "name" : "parentSuite",
    "value" : "tests_api"
  }, {
    "name" : "subSuite",
    "value" : "TestPOST"
  }, {
    "name" : "host",
    "value" : "fv-az1436-523"
  }, {
    "name" : "thread",
    "value" : "2429-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests_api.test_bd"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 27,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 36,
        "unknown" : 0,
        "total" : 63
      },
      "items" : [ {
        "uid" : "88aebf14e4f2e7da",
        "reportUrl" : "https://lambotik.github.io/Oblache/279//#testresult/88aebf14e4f2e7da",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 400",
        "time" : {
          "start" : 1736557369496,
          "stop" : 1736557369868,
          "duration" : 372
        }
      }, {
        "uid" : "ffba4c163b2c4cee",
        "reportUrl" : "https://lambotik.github.io/Oblache/278//#testresult/ffba4c163b2c4cee",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 400",
        "time" : {
          "start" : 1736471038795,
          "stop" : 1736471039111,
          "duration" : 316
        }
      }, {
        "uid" : "8fcb736c3eb38cf8",
        "reportUrl" : "https://lambotik.github.io/Oblache/277//#testresult/8fcb736c3eb38cf8",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 400",
        "time" : {
          "start" : 1736384522818,
          "stop" : 1736384523188,
          "duration" : 370
        }
      }, {
        "uid" : "c60ff56354f58dd6",
        "reportUrl" : "https://lambotik.github.io/Oblache/276//#testresult/c60ff56354f58dd6",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 400",
        "time" : {
          "start" : 1736298144736,
          "stop" : 1736298145053,
          "duration" : 317
        }
      }, {
        "uid" : "e73de3c7d7b84d9b",
        "reportUrl" : "https://lambotik.github.io/Oblache/275//#testresult/e73de3c7d7b84d9b",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 400",
        "time" : {
          "start" : 1736211745773,
          "stop" : 1736211746090,
          "duration" : 317
        }
      }, {
        "uid" : "7a970e70dd056293",
        "reportUrl" : "https://lambotik.github.io/Oblache/274//#testresult/7a970e70dd056293",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 400",
        "time" : {
          "start" : 1736125500252,
          "stop" : 1736125500566,
          "duration" : 314
        }
      }, {
        "uid" : "a2d07542c046b30d",
        "reportUrl" : "https://lambotik.github.io/Oblache/273//#testresult/a2d07542c046b30d",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 400",
        "time" : {
          "start" : 1736039244582,
          "stop" : 1736039245097,
          "duration" : 515
        }
      }, {
        "uid" : "dfa6b0dabf25334e",
        "reportUrl" : "https://lambotik.github.io/Oblache/272//#testresult/dfa6b0dabf25334e",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 400",
        "time" : {
          "start" : 1735952455225,
          "stop" : 1735952455591,
          "duration" : 366
        }
      }, {
        "uid" : "2269b7d9e0e79f88",
        "reportUrl" : "https://lambotik.github.io/Oblache/271//#testresult/2269b7d9e0e79f88",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 400",
        "time" : {
          "start" : 1735866143202,
          "stop" : 1735866143519,
          "duration" : 317
        }
      }, {
        "uid" : "f331d4f63044a217",
        "reportUrl" : "https://lambotik.github.io/Oblache/270//#testresult/f331d4f63044a217",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 400",
        "time" : {
          "start" : 1735779696944,
          "stop" : 1735779697261,
          "duration" : 317
        }
      }, {
        "uid" : "a341c7a14dfc30ec",
        "reportUrl" : "https://lambotik.github.io/Oblache/269//#testresult/a341c7a14dfc30ec",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 400",
        "time" : {
          "start" : 1735693645183,
          "stop" : 1735693645487,
          "duration" : 304
        }
      }, {
        "uid" : "536156be16b6ce1a",
        "reportUrl" : "https://lambotik.github.io/Oblache/268//#testresult/536156be16b6ce1a",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 400",
        "time" : {
          "start" : 1735606915419,
          "stop" : 1735606915932,
          "duration" : 513
        }
      }, {
        "uid" : "ed118f73f5a6300d",
        "reportUrl" : "https://lambotik.github.io/Oblache/267//#testresult/ed118f73f5a6300d",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 400",
        "time" : {
          "start" : 1735520643016,
          "stop" : 1735520643329,
          "duration" : 313
        }
      }, {
        "uid" : "a92509607597c5d9",
        "reportUrl" : "https://lambotik.github.io/Oblache/266//#testresult/a92509607597c5d9",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 400",
        "time" : {
          "start" : 1735434464349,
          "stop" : 1735434464666,
          "duration" : 317
        }
      }, {
        "uid" : "3d7daf74a3e8966",
        "reportUrl" : "https://lambotik.github.io/Oblache/265//#testresult/3d7daf74a3e8966",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 400",
        "time" : {
          "start" : 1735347647768,
          "stop" : 1735347648081,
          "duration" : 313
        }
      }, {
        "uid" : "c396b49543a88c5",
        "reportUrl" : "https://lambotik.github.io/Oblache/264//#testresult/c396b49543a88c5",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 400",
        "time" : {
          "start" : 1735261327243,
          "stop" : 1735261327748,
          "duration" : 505
        }
      }, {
        "uid" : "e6a2f7692b5b4e60",
        "reportUrl" : "https://lambotik.github.io/Oblache/209//#testresult/e6a2f7692b5b4e60",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 400",
        "time" : {
          "start" : 1730509261213,
          "stop" : 1730509261518,
          "duration" : 305
        }
      }, {
        "uid" : "12821e143ea187ee",
        "reportUrl" : "https://lambotik.github.io/Oblache/208//#testresult/12821e143ea187ee",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 400",
        "time" : {
          "start" : 1730423219651,
          "stop" : 1730423219962,
          "duration" : 311
        }
      }, {
        "uid" : "bebbe7f44602dc51",
        "reportUrl" : "https://lambotik.github.io/Oblache/207//#testresult/bebbe7f44602dc51",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 400",
        "time" : {
          "start" : 1730336572872,
          "stop" : 1730336573176,
          "duration" : 304
        }
      }, {
        "uid" : "8f6fbed77efccb99",
        "reportUrl" : "https://lambotik.github.io/Oblache/206//#testresult/8f6fbed77efccb99",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 400",
        "time" : {
          "start" : 1730250154805,
          "stop" : 1730250155156,
          "duration" : 351
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "6954ce4daddd0405.json",
  "parameterValues" : [ ]
}