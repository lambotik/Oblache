{
  "uid" : "bd2c6e5eba07e7d8",
  "name" : "test order db create backup",
  "fullName" : "tests_api.test_bd.TestBackup#test_order_db_create_backup",
  "historyId" : "bbc51bc9e59c2f7de52280f53d30e264",
  "time" : {
    "start" : 1745457008760,
    "stop" : 1745457039230,
    "duration" : 30470
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.ConnectionError: HTTPSConnectionPool(host='dbend.areso.prohttp', port=443): Max retries exceeded with url: /cis_db1.areso.pro/backups/db_cen6maxr.sql (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7f5868204c20>: Failed to resolve 'dbend.areso.prohttp' ([Errno -2] Name or service not known)\"))",
  "statusTrace" : "self = <urllib3.connection.HTTPSConnection object at 0x7f5868204c20>\n\n    def _new_conn(self) -> socket.socket:\n        \"\"\"Establish a socket connection and set nodelay settings on it.\n    \n        :return: New socket connection.\n        \"\"\"\n        try:\n>           sock = connection.create_connection(\n                (self._dns_host, self.port),\n                self.timeout,\n                source_address=self.source_address,\n                socket_options=self.socket_options,\n            )\n\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/urllib3/connection.py:198: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/urllib3/util/connection.py:60: in create_connection\n    for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhost = 'dbend.areso.prohttp', port = 443, family = <AddressFamily.AF_UNSPEC: 0>\ntype = <SocketKind.SOCK_STREAM: 1>, proto = 0, flags = 0\n\n    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):\n        \"\"\"Resolve host and port into list of address info entries.\n    \n        Translate the host/port argument into a sequence of 5-tuples that contain\n        all the necessary arguments for creating a socket connected to that service.\n        host is a domain name, a string representation of an IPv4/v6 address or\n        None. port is a string service name such as 'http', a numeric port number or\n        None. By passing None as the value of host and port, you can pass NULL to\n        the underlying C API.\n    \n        The family, type and proto arguments can be optionally specified in order to\n        narrow the list of addresses returned. Passing zero as a value for each of\n        these arguments selects the full range of results.\n        \"\"\"\n        # We override this function since we want to translate the numeric family\n        # and socket type values to enum constants.\n        addrlist = []\n>       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\nE       socket.gaierror: [Errno -2] Name or service not known\n\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/socket.py:978: gaierror\n\nThe above exception was the direct cause of the following exception:\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x7f58674a0d10>\nmethod = 'GET', url = '/cis_db1.areso.pro/backups/db_cen6maxr.sql', body = None\nheaders = {'User-Agent': 'python-requests/2.32.2', 'Accept-Encoding': 'gzip, deflate, br', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Authorization': 'None'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\nredirect = False, assert_same_host = False\ntimeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\nrelease_conn = False, chunked = False, body_pos = None, preload_content = False\ndecode_content = False, response_kw = {}\nparsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/cis_db1.areso.pro/backups/db_cen6maxr.sql', query=None, fragment=None)\ndestination_scheme = None, conn = None, release_this_conn = True\nhttp_tunnel_required = False, err = None, clean_exit = False\n\n    def urlopen(  # type: ignore[override]\n        self,\n        method: str,\n        url: str,\n        body: _TYPE_BODY | None = None,\n        headers: typing.Mapping[str, str] | None = None,\n        retries: Retry | bool | int | None = None,\n        redirect: bool = True,\n        assert_same_host: bool = True,\n        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n        pool_timeout: int | None = None,\n        release_conn: bool | None = None,\n        chunked: bool = False,\n        body_pos: _TYPE_BODY_POSITION | None = None,\n        preload_content: bool = True,\n        decode_content: bool = True,\n        **response_kw: typing.Any,\n    ) -> BaseHTTPResponse:\n        \"\"\"\n        Get a connection from the pool and perform an HTTP request. This is the\n        lowest level call for making a request, so you'll need to specify all\n        the raw details.\n    \n        .. note::\n    \n           More commonly, it's appropriate to use a convenience method\n           such as :meth:`request`.\n    \n        .. note::\n    \n           `release_conn` will only behave as expected if\n           `preload_content=False` because we want to make\n           `preload_content=False` the default behaviour someday soon without\n           breaking backwards compatibility.\n    \n        :param method:\n            HTTP request method (such as GET, POST, PUT, etc.)\n    \n        :param url:\n            The URL to perform the request on.\n    \n        :param body:\n            Data to send in the request body, either :class:`str`, :class:`bytes`,\n            an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n    \n        :param headers:\n            Dictionary of custom headers to send, such as User-Agent,\n            If-None-Match, etc. If None, pool headers are used. If provided,\n            these headers completely replace any pool-specific headers.\n    \n        :param retries:\n            Configure the number of retries to allow before raising a\n            :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n            If ``None`` (default) will retry 3 times, see ``Retry.DEFAULT``. Pass a\n            :class:`~urllib3.util.retry.Retry` object for fine-grained control\n            over different types of retries.\n            Pass an integer number to retry connection errors that many times,\n            but no other types of errors. Pass zero to never retry.\n    \n            If ``False``, then retries are disabled and any exception is raised\n            immediately. Also, instead of raising a MaxRetryError on redirects,\n            the redirect response will be returned.\n    \n        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n        :param redirect:\n            If True, automatically handle redirects (status codes 301, 302,\n            303, 307, 308). Each redirect counts as a retry. Disabling retries\n            will disable redirect, too.\n    \n        :param assert_same_host:\n            If ``True``, will make sure that the host of the pool requests is\n            consistent else will raise HostChangedError. When ``False``, you can\n            use the pool on an HTTP proxy and request foreign hosts.\n    \n        :param timeout:\n            If specified, overrides the default timeout for this one\n            request. It may be a float (in seconds) or an instance of\n            :class:`urllib3.util.Timeout`.\n    \n        :param pool_timeout:\n            If set and the pool is set to block=True, then this method will\n            block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n            connection is available within the time period.\n    \n        :param bool preload_content:\n            If True, the response's body will be preloaded into memory.\n    \n        :param bool decode_content:\n            If True, will attempt to decode the body based on the\n            'content-encoding' header.\n    \n        :param release_conn:\n            If False, then the urlopen call will not release the connection\n            back into the pool once a response is received (but will release if\n            you read the entire contents of the response such as when\n            `preload_content=True`). This is useful if you're not preloading\n            the response's content immediately. You will need to call\n            ``r.release_conn()`` on the response ``r`` to return the connection\n            back into the pool. If None, it takes the value of ``preload_content``\n            which defaults to ``True``.\n    \n        :param bool chunked:\n            If True, urllib3 will send the body using chunked transfer\n            encoding. Otherwise, urllib3 will send the body using the standard\n            content-length form. Defaults to False.\n    \n        :param int body_pos:\n            Position to seek to in file-like body in the event of a retry or\n            redirect. Typically this won't need to be set because urllib3 will\n            auto-populate the value when needed.\n        \"\"\"\n        parsed_url = parse_url(url)\n        destination_scheme = parsed_url.scheme\n    \n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = preload_content\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        # Ensure that the URL we're connecting to is properly encoded\n        if url.startswith(\"/\"):\n            url = to_str(_encode_target(url))\n        else:\n            url = to_str(parsed_url.url)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/urllib3/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        http_tunnel_required = connection_requires_http_tunnel(\n            self.proxy, self.proxy_config, destination_scheme\n        )\n    \n        # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n        # have to copy the headers dict so we can safely change it without those\n        # changes being reflected in anyone else's copy.\n        if not http_tunnel_required:\n            headers = headers.copy()  # type: ignore[attr-defined]\n            headers.update(self.proxy_headers)  # type: ignore[union-attr]\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n    \n            # Is this a closed/new connection that requires CONNECT tunnelling?\n            if self.proxy is not None and http_tunnel_required and conn.is_closed:\n                try:\n                    self._prepare_proxy(conn)\n                except (BaseSSLError, OSError, SocketTimeout) as e:\n                    self._raise_timeout(\n                        err=e, url=self.proxy.url, timeout_value=conn.timeout\n                    )\n                    raise\n    \n            # If we're going to release the connection in ``finally:``, then\n            # the response doesn't need to know about the connection. Otherwise\n            # it will also try to release it and we'll have a double-release\n            # mess.\n            response_conn = conn if not release_conn else None\n    \n            # Make the request on the HTTPConnection object\n>           response = self._make_request(\n                conn,\n                method,\n                url,\n                timeout=timeout_obj,\n                body=body,\n                headers=headers,\n                chunked=chunked,\n                retries=retries,\n                response_conn=response_conn,\n                preload_content=preload_content,\n                decode_content=decode_content,\n                **response_kw,\n            )\n\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/urllib3/connectionpool.py:787: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/urllib3/connectionpool.py:488: in _make_request\n    raise new_e\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/urllib3/connectionpool.py:464: in _make_request\n    self._validate_conn(conn)\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/urllib3/connectionpool.py:1093: in _validate_conn\n    conn.connect()\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/urllib3/connection.py:704: in connect\n    self.sock = sock = self._new_conn()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.HTTPSConnection object at 0x7f5868204c20>\n\n    def _new_conn(self) -> socket.socket:\n        \"\"\"Establish a socket connection and set nodelay settings on it.\n    \n        :return: New socket connection.\n        \"\"\"\n        try:\n            sock = connection.create_connection(\n                (self._dns_host, self.port),\n                self.timeout,\n                source_address=self.source_address,\n                socket_options=self.socket_options,\n            )\n        except socket.gaierror as e:\n>           raise NameResolutionError(self.host, self, e) from e\nE           urllib3.exceptions.NameResolutionError: <urllib3.connection.HTTPSConnection object at 0x7f5868204c20>: Failed to resolve 'dbend.areso.prohttp' ([Errno -2] Name or service not known)\n\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/urllib3/connection.py:205: NameResolutionError\n\nThe above exception was the direct cause of the following exception:\n\nself = <requests.adapters.HTTPAdapter object at 0x7f586831c800>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = Timeout(connect=None, read=None, total=None), verify = True\ncert = None, proxies = OrderedDict()\n\n    def send(\n        self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n    ):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n        :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n        :param stream: (optional) Whether to stream the request content.\n        :param timeout: (optional) How long to wait for the server to send\n            data before giving up, as a float, or a :ref:`(connect timeout,\n            read timeout) <timeouts>` tuple.\n        :type timeout: float or tuple or urllib3 Timeout object\n        :param verify: (optional) Either a boolean, in which case it controls whether\n            we verify the server's TLS certificate, or a string, in which case it\n            must be a path to a CA bundle to use\n        :param cert: (optional) Any user-provided SSL certificate to be trusted.\n        :param proxies: (optional) The proxies dictionary to apply to the request.\n        :rtype: requests.Response\n        \"\"\"\n    \n        try:\n            conn = self.get_connection_with_tls_context(\n                request, verify, proxies=proxies, cert=cert\n            )\n        except LocationValueError as e:\n            raise InvalidURL(e, request=request)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(\n            request,\n            stream=stream,\n            timeout=timeout,\n            verify=verify,\n            cert=cert,\n            proxies=proxies,\n        )\n    \n        chunked = not (request.body is None or \"Content-Length\" in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError:\n                raise ValueError(\n                    f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n                    f\"or a single float to set both timeouts to the same value.\"\n                )\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n>           resp = conn.urlopen(\n                method=request.method,\n                url=url,\n                body=request.body,\n                headers=request.headers,\n                redirect=False,\n                assert_same_host=False,\n                preload_content=False,\n                decode_content=False,\n                retries=self.max_retries,\n                timeout=timeout,\n                chunked=chunked,\n            )\n\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/requests/adapters.py:589: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/urllib3/connectionpool.py:841: in urlopen\n    retries = retries.increment(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Retry(total=0, connect=None, read=False, redirect=None, status=None)\nmethod = 'GET', url = '/cis_db1.areso.pro/backups/db_cen6maxr.sql'\nresponse = None\nerror = NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7f5868204c20>: Failed to resolve 'dbend.areso.prohttp' ([Errno -2] Name or service not known)\")\n_pool = <urllib3.connectionpool.HTTPSConnectionPool object at 0x7f58674a0d10>\n_stacktrace = <traceback object at 0x7f58681f9440>\n\n    def increment(\n        self,\n        method: str | None = None,\n        url: str | None = None,\n        response: BaseHTTPResponse | None = None,\n        error: Exception | None = None,\n        _pool: ConnectionPool | None = None,\n        _stacktrace: TracebackType | None = None,\n    ) -> Self:\n        \"\"\"Return a new Retry object with incremented retry counters.\n    \n        :param response: A response object, or None, if the server did not\n            return a response.\n        :type response: :class:`~urllib3.response.BaseHTTPResponse`\n        :param Exception error: An error encountered during the request, or\n            None if the response was received successfully.\n    \n        :return: A new ``Retry`` object.\n        \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        other = self.other\n        cause = \"unknown\"\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or method is None or not self._is_method_retryable(method):\n                raise reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif error:\n            # Other retry?\n            if other is not None:\n                other -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = \"too many redirects\"\n            response_redirect_location = response.get_redirect_location()\n            if response_redirect_location:\n                redirect_location = response_redirect_location\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and the given method is in the allowed_methods\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\n                status = response.status\n    \n        history = self.history + (\n            RequestHistory(method, url, error, status, redirect_location),\n        )\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect,\n            read=read,\n            redirect=redirect,\n            status=status_count,\n            other=other,\n            history=history,\n        )\n    \n        if new_retry.is_exhausted():\n            reason = error or ResponseError(cause)\n>           raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\nE           urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='dbend.areso.prohttp', port=443): Max retries exceeded with url: /cis_db1.areso.pro/backups/db_cen6maxr.sql (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7f5868204c20>: Failed to resolve 'dbend.areso.prohttp' ([Errno -2] Name or service not known)\"))\n\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/urllib3/util/retry.py:519: MaxRetryError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests_api.test_bd.TestBackup object at 0x7f586831cbc0>\nget_token_backup_2 = ('865f4d05-f32c-45a7-8f27-cc832dab7ce0', {'email': 'testbackup2@gmail.com', 'password': 'gwqldBUEoNGUiBrKFeVv'}, '066dc8d1-2d0a-753b-8000-ba69b49e1e8c')\n\n    @allure.title('test order db create backup')\n    def test_order_db_create_backup(self, get_token_backup_2):\n        token, body, uuid = get_token_backup_2\n        response = API.post_db_backup_create(token=token, db_uuid=uuid)\n        Checking.check_status_code(response, 200)\n        Checking.check_json_value(response, 'content', 'db backup order sent')\n        time.sleep(30)\n>       response = API.get_check_downloading_backup()\n\ntests_api/test_bd.py:451: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests_api/utils/request.py:207: in get_check_downloading_backup\n    response = HttpMethods.get(get_url)\ntests_api/utils/http_methods.py:21: in get\n    response = requests.get(\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/requests/api.py:73: in get\n    return request(\"get\", url, params=params, **kwargs)\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/requests/api.py:59: in request\n    return session.request(method=method, url=url, **kwargs)\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/requests/sessions.py:589: in request\n    resp = self.send(prep, **send_kwargs)\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/requests/sessions.py:703: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <requests.adapters.HTTPAdapter object at 0x7f586831c800>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = Timeout(connect=None, read=None, total=None), verify = True\ncert = None, proxies = OrderedDict()\n\n    def send(\n        self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n    ):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n        :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n        :param stream: (optional) Whether to stream the request content.\n        :param timeout: (optional) How long to wait for the server to send\n            data before giving up, as a float, or a :ref:`(connect timeout,\n            read timeout) <timeouts>` tuple.\n        :type timeout: float or tuple or urllib3 Timeout object\n        :param verify: (optional) Either a boolean, in which case it controls whether\n            we verify the server's TLS certificate, or a string, in which case it\n            must be a path to a CA bundle to use\n        :param cert: (optional) Any user-provided SSL certificate to be trusted.\n        :param proxies: (optional) The proxies dictionary to apply to the request.\n        :rtype: requests.Response\n        \"\"\"\n    \n        try:\n            conn = self.get_connection_with_tls_context(\n                request, verify, proxies=proxies, cert=cert\n            )\n        except LocationValueError as e:\n            raise InvalidURL(e, request=request)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(\n            request,\n            stream=stream,\n            timeout=timeout,\n            verify=verify,\n            cert=cert,\n            proxies=proxies,\n        )\n    \n        chunked = not (request.body is None or \"Content-Length\" in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError:\n                raise ValueError(\n                    f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n                    f\"or a single float to set both timeouts to the same value.\"\n                )\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            resp = conn.urlopen(\n                method=request.method,\n                url=url,\n                body=request.body,\n                headers=request.headers,\n                redirect=False,\n                assert_same_host=False,\n                preload_content=False,\n                decode_content=False,\n                retries=self.max_retries,\n                timeout=timeout,\n                chunked=chunked,\n            )\n    \n        except (ProtocolError, OSError) as err:\n            raise ConnectionError(err, request=request)\n    \n        except MaxRetryError as e:\n            if isinstance(e.reason, ConnectTimeoutError):\n                # TODO: Remove this in 3.0.0: see #2811\n                if not isinstance(e.reason, NewConnectionError):\n                    raise ConnectTimeout(e, request=request)\n    \n            if isinstance(e.reason, ResponseError):\n                raise RetryError(e, request=request)\n    \n            if isinstance(e.reason, _ProxyError):\n                raise ProxyError(e, request=request)\n    \n            if isinstance(e.reason, _SSLError):\n                # This branch is for urllib3 v1.22 and later.\n                raise SSLError(e, request=request)\n    \n>           raise ConnectionError(e, request=request)\nE           requests.exceptions.ConnectionError: HTTPSConnectionPool(host='dbend.areso.prohttp', port=443): Max retries exceeded with url: /cis_db1.areso.pro/backups/db_cen6maxr.sql (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7f5868204c20>: Failed to resolve 'dbend.areso.prohttp' ([Errno -2] Name or service not known)\"))\n\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/requests/adapters.py:622: ConnectionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "get_token_backup_2",
    "time" : {
      "start" : 1745457008377,
      "stop" : 1745457008760,
      "duration" : 383
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Assert status code: 200 == Response status code: 200",
      "time" : {
        "start" : 1745457008760,
        "stop" : 1745457008760,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.ConnectionError: HTTPSConnectionPool(host='dbend.areso.prohttp', port=443): Max retries exceeded with url: /cis_db1.areso.pro/backups/db_cen6maxr.sql (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7f5868204c20>: Failed to resolve 'dbend.areso.prohttp' ([Errno -2] Name or service not known)\"))",
    "statusTrace" : "self = <urllib3.connection.HTTPSConnection object at 0x7f5868204c20>\n\n    def _new_conn(self) -> socket.socket:\n        \"\"\"Establish a socket connection and set nodelay settings on it.\n    \n        :return: New socket connection.\n        \"\"\"\n        try:\n>           sock = connection.create_connection(\n                (self._dns_host, self.port),\n                self.timeout,\n                source_address=self.source_address,\n                socket_options=self.socket_options,\n            )\n\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/urllib3/connection.py:198: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/urllib3/util/connection.py:60: in create_connection\n    for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhost = 'dbend.areso.prohttp', port = 443, family = <AddressFamily.AF_UNSPEC: 0>\ntype = <SocketKind.SOCK_STREAM: 1>, proto = 0, flags = 0\n\n    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):\n        \"\"\"Resolve host and port into list of address info entries.\n    \n        Translate the host/port argument into a sequence of 5-tuples that contain\n        all the necessary arguments for creating a socket connected to that service.\n        host is a domain name, a string representation of an IPv4/v6 address or\n        None. port is a string service name such as 'http', a numeric port number or\n        None. By passing None as the value of host and port, you can pass NULL to\n        the underlying C API.\n    \n        The family, type and proto arguments can be optionally specified in order to\n        narrow the list of addresses returned. Passing zero as a value for each of\n        these arguments selects the full range of results.\n        \"\"\"\n        # We override this function since we want to translate the numeric family\n        # and socket type values to enum constants.\n        addrlist = []\n>       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\nE       socket.gaierror: [Errno -2] Name or service not known\n\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/socket.py:978: gaierror\n\nThe above exception was the direct cause of the following exception:\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x7f58674a0d10>\nmethod = 'GET', url = '/cis_db1.areso.pro/backups/db_cen6maxr.sql', body = None\nheaders = {'User-Agent': 'python-requests/2.32.2', 'Accept-Encoding': 'gzip, deflate, br', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Authorization': 'None'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\nredirect = False, assert_same_host = False\ntimeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\nrelease_conn = False, chunked = False, body_pos = None, preload_content = False\ndecode_content = False, response_kw = {}\nparsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/cis_db1.areso.pro/backups/db_cen6maxr.sql', query=None, fragment=None)\ndestination_scheme = None, conn = None, release_this_conn = True\nhttp_tunnel_required = False, err = None, clean_exit = False\n\n    def urlopen(  # type: ignore[override]\n        self,\n        method: str,\n        url: str,\n        body: _TYPE_BODY | None = None,\n        headers: typing.Mapping[str, str] | None = None,\n        retries: Retry | bool | int | None = None,\n        redirect: bool = True,\n        assert_same_host: bool = True,\n        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n        pool_timeout: int | None = None,\n        release_conn: bool | None = None,\n        chunked: bool = False,\n        body_pos: _TYPE_BODY_POSITION | None = None,\n        preload_content: bool = True,\n        decode_content: bool = True,\n        **response_kw: typing.Any,\n    ) -> BaseHTTPResponse:\n        \"\"\"\n        Get a connection from the pool and perform an HTTP request. This is the\n        lowest level call for making a request, so you'll need to specify all\n        the raw details.\n    \n        .. note::\n    \n           More commonly, it's appropriate to use a convenience method\n           such as :meth:`request`.\n    \n        .. note::\n    \n           `release_conn` will only behave as expected if\n           `preload_content=False` because we want to make\n           `preload_content=False` the default behaviour someday soon without\n           breaking backwards compatibility.\n    \n        :param method:\n            HTTP request method (such as GET, POST, PUT, etc.)\n    \n        :param url:\n            The URL to perform the request on.\n    \n        :param body:\n            Data to send in the request body, either :class:`str`, :class:`bytes`,\n            an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n    \n        :param headers:\n            Dictionary of custom headers to send, such as User-Agent,\n            If-None-Match, etc. If None, pool headers are used. If provided,\n            these headers completely replace any pool-specific headers.\n    \n        :param retries:\n            Configure the number of retries to allow before raising a\n            :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n            If ``None`` (default) will retry 3 times, see ``Retry.DEFAULT``. Pass a\n            :class:`~urllib3.util.retry.Retry` object for fine-grained control\n            over different types of retries.\n            Pass an integer number to retry connection errors that many times,\n            but no other types of errors. Pass zero to never retry.\n    \n            If ``False``, then retries are disabled and any exception is raised\n            immediately. Also, instead of raising a MaxRetryError on redirects,\n            the redirect response will be returned.\n    \n        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n        :param redirect:\n            If True, automatically handle redirects (status codes 301, 302,\n            303, 307, 308). Each redirect counts as a retry. Disabling retries\n            will disable redirect, too.\n    \n        :param assert_same_host:\n            If ``True``, will make sure that the host of the pool requests is\n            consistent else will raise HostChangedError. When ``False``, you can\n            use the pool on an HTTP proxy and request foreign hosts.\n    \n        :param timeout:\n            If specified, overrides the default timeout for this one\n            request. It may be a float (in seconds) or an instance of\n            :class:`urllib3.util.Timeout`.\n    \n        :param pool_timeout:\n            If set and the pool is set to block=True, then this method will\n            block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n            connection is available within the time period.\n    \n        :param bool preload_content:\n            If True, the response's body will be preloaded into memory.\n    \n        :param bool decode_content:\n            If True, will attempt to decode the body based on the\n            'content-encoding' header.\n    \n        :param release_conn:\n            If False, then the urlopen call will not release the connection\n            back into the pool once a response is received (but will release if\n            you read the entire contents of the response such as when\n            `preload_content=True`). This is useful if you're not preloading\n            the response's content immediately. You will need to call\n            ``r.release_conn()`` on the response ``r`` to return the connection\n            back into the pool. If None, it takes the value of ``preload_content``\n            which defaults to ``True``.\n    \n        :param bool chunked:\n            If True, urllib3 will send the body using chunked transfer\n            encoding. Otherwise, urllib3 will send the body using the standard\n            content-length form. Defaults to False.\n    \n        :param int body_pos:\n            Position to seek to in file-like body in the event of a retry or\n            redirect. Typically this won't need to be set because urllib3 will\n            auto-populate the value when needed.\n        \"\"\"\n        parsed_url = parse_url(url)\n        destination_scheme = parsed_url.scheme\n    \n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = preload_content\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        # Ensure that the URL we're connecting to is properly encoded\n        if url.startswith(\"/\"):\n            url = to_str(_encode_target(url))\n        else:\n            url = to_str(parsed_url.url)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/urllib3/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        http_tunnel_required = connection_requires_http_tunnel(\n            self.proxy, self.proxy_config, destination_scheme\n        )\n    \n        # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n        # have to copy the headers dict so we can safely change it without those\n        # changes being reflected in anyone else's copy.\n        if not http_tunnel_required:\n            headers = headers.copy()  # type: ignore[attr-defined]\n            headers.update(self.proxy_headers)  # type: ignore[union-attr]\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n    \n            # Is this a closed/new connection that requires CONNECT tunnelling?\n            if self.proxy is not None and http_tunnel_required and conn.is_closed:\n                try:\n                    self._prepare_proxy(conn)\n                except (BaseSSLError, OSError, SocketTimeout) as e:\n                    self._raise_timeout(\n                        err=e, url=self.proxy.url, timeout_value=conn.timeout\n                    )\n                    raise\n    \n            # If we're going to release the connection in ``finally:``, then\n            # the response doesn't need to know about the connection. Otherwise\n            # it will also try to release it and we'll have a double-release\n            # mess.\n            response_conn = conn if not release_conn else None\n    \n            # Make the request on the HTTPConnection object\n>           response = self._make_request(\n                conn,\n                method,\n                url,\n                timeout=timeout_obj,\n                body=body,\n                headers=headers,\n                chunked=chunked,\n                retries=retries,\n                response_conn=response_conn,\n                preload_content=preload_content,\n                decode_content=decode_content,\n                **response_kw,\n            )\n\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/urllib3/connectionpool.py:787: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/urllib3/connectionpool.py:488: in _make_request\n    raise new_e\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/urllib3/connectionpool.py:464: in _make_request\n    self._validate_conn(conn)\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/urllib3/connectionpool.py:1093: in _validate_conn\n    conn.connect()\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/urllib3/connection.py:704: in connect\n    self.sock = sock = self._new_conn()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.HTTPSConnection object at 0x7f5868204c20>\n\n    def _new_conn(self) -> socket.socket:\n        \"\"\"Establish a socket connection and set nodelay settings on it.\n    \n        :return: New socket connection.\n        \"\"\"\n        try:\n            sock = connection.create_connection(\n                (self._dns_host, self.port),\n                self.timeout,\n                source_address=self.source_address,\n                socket_options=self.socket_options,\n            )\n        except socket.gaierror as e:\n>           raise NameResolutionError(self.host, self, e) from e\nE           urllib3.exceptions.NameResolutionError: <urllib3.connection.HTTPSConnection object at 0x7f5868204c20>: Failed to resolve 'dbend.areso.prohttp' ([Errno -2] Name or service not known)\n\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/urllib3/connection.py:205: NameResolutionError\n\nThe above exception was the direct cause of the following exception:\n\nself = <requests.adapters.HTTPAdapter object at 0x7f586831c800>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = Timeout(connect=None, read=None, total=None), verify = True\ncert = None, proxies = OrderedDict()\n\n    def send(\n        self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n    ):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n        :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n        :param stream: (optional) Whether to stream the request content.\n        :param timeout: (optional) How long to wait for the server to send\n            data before giving up, as a float, or a :ref:`(connect timeout,\n            read timeout) <timeouts>` tuple.\n        :type timeout: float or tuple or urllib3 Timeout object\n        :param verify: (optional) Either a boolean, in which case it controls whether\n            we verify the server's TLS certificate, or a string, in which case it\n            must be a path to a CA bundle to use\n        :param cert: (optional) Any user-provided SSL certificate to be trusted.\n        :param proxies: (optional) The proxies dictionary to apply to the request.\n        :rtype: requests.Response\n        \"\"\"\n    \n        try:\n            conn = self.get_connection_with_tls_context(\n                request, verify, proxies=proxies, cert=cert\n            )\n        except LocationValueError as e:\n            raise InvalidURL(e, request=request)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(\n            request,\n            stream=stream,\n            timeout=timeout,\n            verify=verify,\n            cert=cert,\n            proxies=proxies,\n        )\n    \n        chunked = not (request.body is None or \"Content-Length\" in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError:\n                raise ValueError(\n                    f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n                    f\"or a single float to set both timeouts to the same value.\"\n                )\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n>           resp = conn.urlopen(\n                method=request.method,\n                url=url,\n                body=request.body,\n                headers=request.headers,\n                redirect=False,\n                assert_same_host=False,\n                preload_content=False,\n                decode_content=False,\n                retries=self.max_retries,\n                timeout=timeout,\n                chunked=chunked,\n            )\n\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/requests/adapters.py:589: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/urllib3/connectionpool.py:841: in urlopen\n    retries = retries.increment(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Retry(total=0, connect=None, read=False, redirect=None, status=None)\nmethod = 'GET', url = '/cis_db1.areso.pro/backups/db_cen6maxr.sql'\nresponse = None\nerror = NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7f5868204c20>: Failed to resolve 'dbend.areso.prohttp' ([Errno -2] Name or service not known)\")\n_pool = <urllib3.connectionpool.HTTPSConnectionPool object at 0x7f58674a0d10>\n_stacktrace = <traceback object at 0x7f58681f9440>\n\n    def increment(\n        self,\n        method: str | None = None,\n        url: str | None = None,\n        response: BaseHTTPResponse | None = None,\n        error: Exception | None = None,\n        _pool: ConnectionPool | None = None,\n        _stacktrace: TracebackType | None = None,\n    ) -> Self:\n        \"\"\"Return a new Retry object with incremented retry counters.\n    \n        :param response: A response object, or None, if the server did not\n            return a response.\n        :type response: :class:`~urllib3.response.BaseHTTPResponse`\n        :param Exception error: An error encountered during the request, or\n            None if the response was received successfully.\n    \n        :return: A new ``Retry`` object.\n        \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        other = self.other\n        cause = \"unknown\"\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or method is None or not self._is_method_retryable(method):\n                raise reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif error:\n            # Other retry?\n            if other is not None:\n                other -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = \"too many redirects\"\n            response_redirect_location = response.get_redirect_location()\n            if response_redirect_location:\n                redirect_location = response_redirect_location\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and the given method is in the allowed_methods\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\n                status = response.status\n    \n        history = self.history + (\n            RequestHistory(method, url, error, status, redirect_location),\n        )\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect,\n            read=read,\n            redirect=redirect,\n            status=status_count,\n            other=other,\n            history=history,\n        )\n    \n        if new_retry.is_exhausted():\n            reason = error or ResponseError(cause)\n>           raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\nE           urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='dbend.areso.prohttp', port=443): Max retries exceeded with url: /cis_db1.areso.pro/backups/db_cen6maxr.sql (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7f5868204c20>: Failed to resolve 'dbend.areso.prohttp' ([Errno -2] Name or service not known)\"))\n\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/urllib3/util/retry.py:519: MaxRetryError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests_api.test_bd.TestBackup object at 0x7f586831cbc0>\nget_token_backup_2 = ('865f4d05-f32c-45a7-8f27-cc832dab7ce0', {'email': 'testbackup2@gmail.com', 'password': 'gwqldBUEoNGUiBrKFeVv'}, '066dc8d1-2d0a-753b-8000-ba69b49e1e8c')\n\n    @allure.title('test order db create backup')\n    def test_order_db_create_backup(self, get_token_backup_2):\n        token, body, uuid = get_token_backup_2\n        response = API.post_db_backup_create(token=token, db_uuid=uuid)\n        Checking.check_status_code(response, 200)\n        Checking.check_json_value(response, 'content', 'db backup order sent')\n        time.sleep(30)\n>       response = API.get_check_downloading_backup()\n\ntests_api/test_bd.py:451: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests_api/utils/request.py:207: in get_check_downloading_backup\n    response = HttpMethods.get(get_url)\ntests_api/utils/http_methods.py:21: in get\n    response = requests.get(\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/requests/api.py:73: in get\n    return request(\"get\", url, params=params, **kwargs)\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/requests/api.py:59: in request\n    return session.request(method=method, url=url, **kwargs)\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/requests/sessions.py:589: in request\n    resp = self.send(prep, **send_kwargs)\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/requests/sessions.py:703: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <requests.adapters.HTTPAdapter object at 0x7f586831c800>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = Timeout(connect=None, read=None, total=None), verify = True\ncert = None, proxies = OrderedDict()\n\n    def send(\n        self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n    ):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n        :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n        :param stream: (optional) Whether to stream the request content.\n        :param timeout: (optional) How long to wait for the server to send\n            data before giving up, as a float, or a :ref:`(connect timeout,\n            read timeout) <timeouts>` tuple.\n        :type timeout: float or tuple or urllib3 Timeout object\n        :param verify: (optional) Either a boolean, in which case it controls whether\n            we verify the server's TLS certificate, or a string, in which case it\n            must be a path to a CA bundle to use\n        :param cert: (optional) Any user-provided SSL certificate to be trusted.\n        :param proxies: (optional) The proxies dictionary to apply to the request.\n        :rtype: requests.Response\n        \"\"\"\n    \n        try:\n            conn = self.get_connection_with_tls_context(\n                request, verify, proxies=proxies, cert=cert\n            )\n        except LocationValueError as e:\n            raise InvalidURL(e, request=request)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(\n            request,\n            stream=stream,\n            timeout=timeout,\n            verify=verify,\n            cert=cert,\n            proxies=proxies,\n        )\n    \n        chunked = not (request.body is None or \"Content-Length\" in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError:\n                raise ValueError(\n                    f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n                    f\"or a single float to set both timeouts to the same value.\"\n                )\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            resp = conn.urlopen(\n                method=request.method,\n                url=url,\n                body=request.body,\n                headers=request.headers,\n                redirect=False,\n                assert_same_host=False,\n                preload_content=False,\n                decode_content=False,\n                retries=self.max_retries,\n                timeout=timeout,\n                chunked=chunked,\n            )\n    \n        except (ProtocolError, OSError) as err:\n            raise ConnectionError(err, request=request)\n    \n        except MaxRetryError as e:\n            if isinstance(e.reason, ConnectTimeoutError):\n                # TODO: Remove this in 3.0.0: see #2811\n                if not isinstance(e.reason, NewConnectionError):\n                    raise ConnectTimeout(e, request=request)\n    \n            if isinstance(e.reason, ResponseError):\n                raise RetryError(e, request=request)\n    \n            if isinstance(e.reason, _ProxyError):\n                raise ProxyError(e, request=request)\n    \n            if isinstance(e.reason, _SSLError):\n                # This branch is for urllib3 v1.22 and later.\n                raise SSLError(e, request=request)\n    \n>           raise ConnectionError(e, request=request)\nE           requests.exceptions.ConnectionError: HTTPSConnectionPool(host='dbend.areso.prohttp', port=443): Max retries exceeded with url: /cis_db1.areso.pro/backups/db_cen6maxr.sql (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7f5868204c20>: Failed to resolve 'dbend.areso.prohttp' ([Errno -2] Name or service not known)\"))\n\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/requests/adapters.py:622: ConnectionError",
    "steps" : [ {
      "name" : "Endpoint: /db_backup_create",
      "time" : {
        "start" : 1745457009158,
        "stop" : 1745457009158,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Request:",
      "time" : {
        "start" : 1745457009158,
        "stop" : 1745457009158,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "Headers: {'Content-Type': 'application/json', 'Authorization': '865f4d05-f32c-45a7-8f27-cc832dab7ce0'}",
        "time" : {
          "start" : 1745457009158,
          "stop" : 1745457009158,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 1,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "Response:",
      "time" : {
        "start" : 1745457009158,
        "stop" : 1745457009159,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "Status code: 200",
        "time" : {
          "start" : 1745457009158,
          "stop" : 1745457009158,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      }, {
        "name" : "JSON: {\n    \"content\": \"db backup order sent\"\n}\n",
        "time" : {
          "start" : 1745457009159,
          "stop" : 1745457009159,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 2,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "Assert status code: 200 == Response status code: 200",
      "time" : {
        "start" : 1745457009159,
        "stop" : 1745457009159,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Compare result request with expected value:\nResponse: <Response [200]>\nField name: content\nValue: db backup order sent",
      "time" : {
        "start" : 1745457009159,
        "stop" : 1745457009159,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 8,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "suite",
    "value" : "Test Backup"
  }, {
    "name" : "parentSuite",
    "value" : "tests_api"
  }, {
    "name" : "subSuite",
    "value" : "TestBackup"
  }, {
    "name" : "host",
    "value" : "fv-az1276-914"
  }, {
    "name" : "thread",
    "value" : "2458-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests_api.test_bd"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 23,
        "broken" : 51,
        "skipped" : 0,
        "passed" : 96,
        "unknown" : 0,
        "total" : 170
      },
      "items" : [ {
        "uid" : "fb59c7d55a3f7997",
        "reportUrl" : "https://lambotik.github.io/Oblache/381//#testresult/fb59c7d55a3f7997",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.ConnectionError: HTTPSConnectionPool(host='dbend.areso.prohttp', port=443): Max retries exceeded with url: /cis_db1.areso.pro/backups/db_cen6maxr.sql (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7f7834ebc320>: Failed to resolve 'dbend.areso.prohttp' ([Errno -2] Name or service not known)\"))",
        "time" : {
          "start" : 1745370608877,
          "stop" : 1745370639222,
          "duration" : 30345
        }
      }, {
        "uid" : "f3269a8db99b56f8",
        "reportUrl" : "https://lambotik.github.io/Oblache/380//#testresult/f3269a8db99b56f8",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.ConnectionError: HTTPSConnectionPool(host='dbend.areso.prohttp', port=443): Max retries exceeded with url: /cis_db1.areso.pro/backups/db_cen6maxr.sql (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7f9d94371130>: Failed to resolve 'dbend.areso.prohttp' ([Errno -2] Name or service not known)\"))",
        "time" : {
          "start" : 1745284209349,
          "stop" : 1745284239896,
          "duration" : 30547
        }
      }, {
        "uid" : "80c3e4440a7f6d20",
        "reportUrl" : "https://lambotik.github.io/Oblache/379//#testresult/80c3e4440a7f6d20",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.ConnectionError: HTTPSConnectionPool(host='dbend.areso.prohttp', port=443): Max retries exceeded with url: /cis_db1.areso.pro/backups/db_cen6maxr.sql (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7f2dd568f2f0>: Failed to resolve 'dbend.areso.prohttp' ([Errno -2] Name or service not known)\"))",
        "time" : {
          "start" : 1745197991067,
          "stop" : 1745198021618,
          "duration" : 30551
        }
      }, {
        "uid" : "b9a313d53988e1ae",
        "reportUrl" : "https://lambotik.github.io/Oblache/378//#testresult/b9a313d53988e1ae",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.ConnectionError: HTTPSConnectionPool(host='dbend.areso.prohttp', port=443): Max retries exceeded with url: /cis_db1.areso.pro/backups/db_cen6maxr.sql (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7f5b73ddf770>: Failed to resolve 'dbend.areso.prohttp' ([Errno -2] Name or service not known)\"))",
        "time" : {
          "start" : 1745111652170,
          "stop" : 1745111682616,
          "duration" : 30446
        }
      }, {
        "uid" : "bc48be6d1c7cd5cf",
        "reportUrl" : "https://lambotik.github.io/Oblache/377//#testresult/bc48be6d1c7cd5cf",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.ConnectionError: HTTPSConnectionPool(host='dbend.areso.prohttp', port=443): Max retries exceeded with url: /cis_db1.areso.pro/backups/db_cen6maxr.sql (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7f99df1f48c0>: Failed to resolve 'dbend.areso.prohttp' ([Errno -2] Name or service not known)\"))",
        "time" : {
          "start" : 1745024829546,
          "stop" : 1745024860260,
          "duration" : 30714
        }
      }, {
        "uid" : "e8f28af18bc5710d",
        "reportUrl" : "https://lambotik.github.io/Oblache/376//#testresult/e8f28af18bc5710d",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.ConnectionError: HTTPSConnectionPool(host='dbend.areso.prohttp', port=443): Max retries exceeded with url: /cis_db1.areso.pro/backups/db_cen6maxr.sql (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7fba7ddefef0>: Failed to resolve 'dbend.areso.prohttp' ([Errno -2] Name or service not known)\"))",
        "time" : {
          "start" : 1744938552152,
          "stop" : 1744938582579,
          "duration" : 30427
        }
      }, {
        "uid" : "42eba51b4010397f",
        "reportUrl" : "https://lambotik.github.io/Oblache/375//#testresult/42eba51b4010397f",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.ConnectionError: HTTPSConnectionPool(host='dbend.areso.prohttp', port=443): Max retries exceeded with url: /cis_db1.areso.pro/backups/db_cen6maxr.sql (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7f3d700d8950>: Failed to resolve 'dbend.areso.prohttp' ([Errno -2] Name or service not known)\"))",
        "time" : {
          "start" : 1744852150107,
          "stop" : 1744852180564,
          "duration" : 30457
        }
      }, {
        "uid" : "16aba2b14bbd251c",
        "reportUrl" : "https://lambotik.github.io/Oblache/374//#testresult/16aba2b14bbd251c",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.ConnectionError: HTTPSConnectionPool(host='dbend.areso.prohttp', port=443): Max retries exceeded with url: /cis_db1.areso.pro/backups/db_cen6maxr.sql (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7fccb2ff6480>: Failed to resolve 'dbend.areso.prohttp' ([Errno -2] Name or service not known)\"))",
        "time" : {
          "start" : 1744765810277,
          "stop" : 1744765840617,
          "duration" : 30340
        }
      }, {
        "uid" : "3063a61c515da428",
        "reportUrl" : "https://lambotik.github.io/Oblache/373//#testresult/3063a61c515da428",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.ConnectionError: HTTPSConnectionPool(host='dbend.areso.prohttp', port=443): Max retries exceeded with url: /cis_db1.areso.pro/backups/db_cen6maxr.sql (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7ff2b8d0b590>: Failed to resolve 'dbend.areso.prohttp' ([Errno -2] Name or service not known)\"))",
        "time" : {
          "start" : 1744679468264,
          "stop" : 1744679498614,
          "duration" : 30350
        }
      }, {
        "uid" : "b7175581a136717d",
        "reportUrl" : "https://lambotik.github.io/Oblache/372//#testresult/b7175581a136717d",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.ConnectionError: HTTPSConnectionPool(host='dbend.areso.prohttp', port=443): Max retries exceeded with url: /cis_db1.areso.pro/backups/db_cen6maxr.sql (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7fcf805066f0>: Failed to resolve 'dbend.areso.prohttp' ([Errno -2] Name or service not known)\"))",
        "time" : {
          "start" : 1744593129014,
          "stop" : 1744593159465,
          "duration" : 30451
        }
      }, {
        "uid" : "fc17ae871bd0b40b",
        "reportUrl" : "https://lambotik.github.io/Oblache/371//#testresult/fc17ae871bd0b40b",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.ConnectionError: HTTPSConnectionPool(host='dbend.areso.prohttp', port=443): Max retries exceeded with url: /cis_db1.areso.pro/backups/db_cen6maxr.sql (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7f5f104f0e60>: Failed to resolve 'dbend.areso.prohttp' ([Errno -2] Name or service not known)\"))",
        "time" : {
          "start" : 1744511888228,
          "stop" : 1744511918589,
          "duration" : 30361
        }
      }, {
        "uid" : "386bb6325deb3f5b",
        "reportUrl" : "https://lambotik.github.io/Oblache/370//#testresult/386bb6325deb3f5b",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.ConnectionError: HTTPSConnectionPool(host='dbend.areso.prohttp', port=443): Max retries exceeded with url: /cis_db1.areso.pro/backups/db_cen6maxr.sql (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7fd15f85b590>: Failed to resolve 'dbend.areso.prohttp' ([Errno -2] Name or service not known)\"))",
        "time" : {
          "start" : 1744420028037,
          "stop" : 1744420058392,
          "duration" : 30355
        }
      }, {
        "uid" : "22874cc72b334a21",
        "reportUrl" : "https://lambotik.github.io/Oblache/369//#testresult/22874cc72b334a21",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.ConnectionError: HTTPSConnectionPool(host='dbend.areso.prohttp', port=443): Max retries exceeded with url: /cis_db1.areso.pro/backups/db_cen6maxr.sql (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7f29e6ed9ee0>: Failed to resolve 'dbend.areso.prohttp' ([Errno -2] Name or service not known)\"))",
        "time" : {
          "start" : 1744333751568,
          "stop" : 1744333781999,
          "duration" : 30431
        }
      }, {
        "uid" : "5d5b9c6ead7b30f5",
        "reportUrl" : "https://lambotik.github.io/Oblache/368//#testresult/5d5b9c6ead7b30f5",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.ConnectionError: HTTPSConnectionPool(host='dbend.areso.prohttp', port=443): Max retries exceeded with url: /cis_db1.areso.pro/backups/db_cen6maxr.sql (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7f6f212635c0>: Failed to resolve 'dbend.areso.prohttp' ([Errno -2] Name or service not known)\"))",
        "time" : {
          "start" : 1744247291576,
          "stop" : 1744247322130,
          "duration" : 30554
        }
      }, {
        "uid" : "944b593130776a9",
        "reportUrl" : "https://lambotik.github.io/Oblache/367//#testresult/944b593130776a9",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.ConnectionError: HTTPSConnectionPool(host='dbend.areso.prohttp', port=443): Max retries exceeded with url: /cis_db1.areso.pro/backups/db_cen6maxr.sql (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7fe7a8675610>: Failed to resolve 'dbend.areso.prohttp' ([Errno -2] Name or service not known)\"))",
        "time" : {
          "start" : 1744160890610,
          "stop" : 1744160921376,
          "duration" : 30766
        }
      }, {
        "uid" : "8810c6e8409ad801",
        "reportUrl" : "https://lambotik.github.io/Oblache/366//#testresult/8810c6e8409ad801",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.ConnectionError: HTTPSConnectionPool(host='dbend.areso.prohttp', port=443): Max retries exceeded with url: /cis_db1.areso.pro/backups/db_cen6maxr.sql (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7f5ac9161d60>: Failed to resolve 'dbend.areso.prohttp' ([Errno -2] Name or service not known)\"))",
        "time" : {
          "start" : 1744074490637,
          "stop" : 1744074521299,
          "duration" : 30662
        }
      }, {
        "uid" : "8d0e2dc16a89a6b7",
        "reportUrl" : "https://lambotik.github.io/Oblache/365//#testresult/8d0e2dc16a89a6b7",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 502",
        "time" : {
          "start" : 1743988166606,
          "stop" : 1743988166606,
          "duration" : 0
        }
      }, {
        "uid" : "910e52cc50603ac7",
        "reportUrl" : "https://lambotik.github.io/Oblache/364//#testresult/910e52cc50603ac7",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 502",
        "time" : {
          "start" : 1743901874337,
          "stop" : 1743901874337,
          "duration" : 0
        }
      }, {
        "uid" : "fd1e4ca8b058814",
        "reportUrl" : "https://lambotik.github.io/Oblache/363//#testresult/fd1e4ca8b058814",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.ConnectionError: HTTPSConnectionPool(host='dbend.areso.prohttp', port=443): Max retries exceeded with url: /cis_db1.areso.pro/backups/db_cen6maxr.sql (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7fb21785a690>: Failed to resolve 'dbend.areso.prohttp' ([Errno -2] Name or service not known)\"))",
        "time" : {
          "start" : 1743815227919,
          "stop" : 1743815258278,
          "duration" : 30359
        }
      }, {
        "uid" : "bef37f4e776761fa",
        "reportUrl" : "https://lambotik.github.io/Oblache/362//#testresult/bef37f4e776761fa",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.ConnectionError: HTTPSConnectionPool(host='dbend.areso.prohttp', port=443): Max retries exceeded with url: /cis_db1.areso.pro/backups/db_cen6maxr.sql (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7fd682deda30>: Failed to resolve 'dbend.areso.prohttp' ([Errno -2] Name or service not known)\"))",
        "time" : {
          "start" : 1743728889335,
          "stop" : 1743728919892,
          "duration" : 30557
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "bd2c6e5eba07e7d8.json",
  "parameterValues" : [ ]
}