{
  "uid" : "787b3ea493a62c11",
  "name" : "POST login/is_logged/logout",
  "fullName" : "tests_api.test_bd.TestPOST#test_post_login_is_logged_logout",
  "historyId" : "5acbe9eedbdaaded55cefbf9042fc1fd",
  "time" : {
    "start" : 1737853353948,
    "stop" : 1737853353948,
    "duration" : 0
  },
  "status" : "broken",
  "statusMessage" : "KeyError: 'token'",
  "statusTrace" : "self = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/requests/models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/json/decoder.py:338: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f0f9f8b7020>\ns = 'Some general exception', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/json/decoder.py:356: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\n    @pytest.fixture()\n    def get_token():\n        \"\"\"\n        Method return:\\n\n        token: str\\n\n        body: dict\\n\n        new_password: str\\n\n        old_password: str\\n\n        email: str\n        :returns: token: str, body: dict, new_password: str, old_password:str, email: str\n        \"\"\"\n        load_dotenv()\n        email = os.getenv('EMAIL')\n        old_password = os.getenv('PASSWORD')\n        new_password = '123456789'\n        try:\n            body = {\"email\": email, \"password\": f'{old_password}'}\n            result = requests.post('https://dbend.areso.pro/login', json=body)\n>           token = result.json()['token']\n\nconftest.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/requests/models.py:978: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\n    @pytest.fixture()\n    def get_token():\n        \"\"\"\n        Method return:\\n\n        token: str\\n\n        body: dict\\n\n        new_password: str\\n\n        old_password: str\\n\n        email: str\n        :returns: token: str, body: dict, new_password: str, old_password:str, email: str\n        \"\"\"\n        load_dotenv()\n        email = os.getenv('EMAIL')\n        old_password = os.getenv('PASSWORD')\n        new_password = '123456789'\n        try:\n            body = {\"email\": email, \"password\": f'{old_password}'}\n            result = requests.post('https://dbend.areso.pro/login', json=body)\n            token = result.json()['token']\n            if token != {}:\n                new_password, old_password = old_password, new_password\n            Checking.check_status_code(result, 200)\n            return token, body, new_password, old_password, email\n        except Exception as ex:\n            print(ex)\n            old_password, new_password = new_password, old_password\n            body = {\"email\": email, \"password\": f'{old_password}'}\n            result = requests.post('https://dbend.areso.pro/login', json=body)\n>           token = result.json()['token']\nE           KeyError: 'token'\n\nconftest.py:40: KeyError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "get_token",
    "time" : {
      "start" : 1737853353949,
      "stop" : 1737853354983,
      "duration" : 1034
    },
    "status" : "broken",
    "statusMessage" : "KeyError: 'token'\n",
    "statusTrace" : "  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/_pytest/fixtures.py\", line 1123, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/_pytest/fixtures.py\", line 902, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n                     ^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/Oblache/Oblache/conftest.py\", line 40, in get_token\n    token = result.json()['token']\n            ~~~~~~~~~~~~~^^^^^^^^^\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  } ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "suite",
    "value" : "POST"
  }, {
    "name" : "parentSuite",
    "value" : "tests_api"
  }, {
    "name" : "subSuite",
    "value" : "TestPOST"
  }, {
    "name" : "host",
    "value" : "fv-az1945-255"
  }, {
    "name" : "thread",
    "value" : "2438-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests_api.test_bd"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 1,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 75,
        "unknown" : 0,
        "total" : 77
      },
      "items" : [ {
        "uid" : "e2d64c4e3334982b",
        "reportUrl" : "https://lambotik.github.io/Oblache/293//#testresult/e2d64c4e3334982b",
        "status" : "passed",
        "time" : {
          "start" : 1737766652353,
          "stop" : 1737766653897,
          "duration" : 1544
        }
      }, {
        "uid" : "4fc9cbcc0f8dc4c2",
        "reportUrl" : "https://lambotik.github.io/Oblache/292//#testresult/4fc9cbcc0f8dc4c2",
        "status" : "passed",
        "time" : {
          "start" : 1737680488575,
          "stop" : 1737680490130,
          "duration" : 1555
        }
      }, {
        "uid" : "59e603b302d512df",
        "reportUrl" : "https://lambotik.github.io/Oblache/291//#testresult/59e603b302d512df",
        "status" : "passed",
        "time" : {
          "start" : 1737594023218,
          "stop" : 1737594024254,
          "duration" : 1036
        }
      }, {
        "uid" : "92c63fcd7ea2c1b4",
        "reportUrl" : "https://lambotik.github.io/Oblache/290//#testresult/92c63fcd7ea2c1b4",
        "status" : "passed",
        "time" : {
          "start" : 1737507707620,
          "stop" : 1737507708711,
          "duration" : 1091
        }
      }, {
        "uid" : "3246c13c49603e86",
        "reportUrl" : "https://lambotik.github.io/Oblache/289//#testresult/3246c13c49603e86",
        "status" : "passed",
        "time" : {
          "start" : 1737421190138,
          "stop" : 1737421191061,
          "duration" : 923
        }
      }, {
        "uid" : "d926dece4d99279c",
        "reportUrl" : "https://lambotik.github.io/Oblache/288//#testresult/d926dece4d99279c",
        "status" : "passed",
        "time" : {
          "start" : 1737334880785,
          "stop" : 1737334881871,
          "duration" : 1086
        }
      }, {
        "uid" : "917a3da2ff21858b",
        "reportUrl" : "https://lambotik.github.io/Oblache/287//#testresult/917a3da2ff21858b",
        "status" : "passed",
        "time" : {
          "start" : 1737248709383,
          "stop" : 1737248711015,
          "duration" : 1632
        }
      }, {
        "uid" : "469858b56c96fa4e",
        "reportUrl" : "https://lambotik.github.io/Oblache/286//#testresult/469858b56c96fa4e",
        "status" : "passed",
        "time" : {
          "start" : 1737161902302,
          "stop" : 1737161903389,
          "duration" : 1087
        }
      }, {
        "uid" : "b22bb10539c09295",
        "reportUrl" : "https://lambotik.github.io/Oblache/285//#testresult/b22bb10539c09295",
        "status" : "passed",
        "time" : {
          "start" : 1737075600723,
          "stop" : 1737075602300,
          "duration" : 1577
        }
      }, {
        "uid" : "9f8ace3733ab33b",
        "reportUrl" : "https://lambotik.github.io/Oblache/284//#testresult/9f8ace3733ab33b",
        "status" : "passed",
        "time" : {
          "start" : 1736989204238,
          "stop" : 1736989205165,
          "duration" : 927
        }
      }, {
        "uid" : "f50478ac3519e11",
        "reportUrl" : "https://lambotik.github.io/Oblache/283//#testresult/f50478ac3519e11",
        "status" : "passed",
        "time" : {
          "start" : 1736902862630,
          "stop" : 1736902863600,
          "duration" : 970
        }
      }, {
        "uid" : "91c5b9f25b2d1386",
        "reportUrl" : "https://lambotik.github.io/Oblache/282//#testresult/91c5b9f25b2d1386",
        "status" : "passed",
        "time" : {
          "start" : 1736816349430,
          "stop" : 1736816350950,
          "duration" : 1520
        }
      }, {
        "uid" : "c38d73e665cbada5",
        "reportUrl" : "https://lambotik.github.io/Oblache/281//#testresult/c38d73e665cbada5",
        "status" : "passed",
        "time" : {
          "start" : 1736730338946,
          "stop" : 1736730339972,
          "duration" : 1026
        }
      }, {
        "uid" : "adc3613e076bddaf",
        "reportUrl" : "https://lambotik.github.io/Oblache/280//#testresult/adc3613e076bddaf",
        "status" : "passed",
        "time" : {
          "start" : 1736644097112,
          "stop" : 1736644098695,
          "duration" : 1583
        }
      }, {
        "uid" : "445ea86f8fe8eb6a",
        "reportUrl" : "https://lambotik.github.io/Oblache/279//#testresult/445ea86f8fe8eb6a",
        "status" : "passed",
        "time" : {
          "start" : 1736557357653,
          "stop" : 1736557358742,
          "duration" : 1089
        }
      }, {
        "uid" : "6bf8b47cbc3d2f7b",
        "reportUrl" : "https://lambotik.github.io/Oblache/278//#testresult/6bf8b47cbc3d2f7b",
        "status" : "passed",
        "time" : {
          "start" : 1736471028316,
          "stop" : 1736471029274,
          "duration" : 958
        }
      }, {
        "uid" : "3233b2a5738ea0c0",
        "reportUrl" : "https://lambotik.github.io/Oblache/277//#testresult/3233b2a5738ea0c0",
        "status" : "passed",
        "time" : {
          "start" : 1736384511031,
          "stop" : 1736384512121,
          "duration" : 1090
        }
      }, {
        "uid" : "a2ebb3de665ba7cb",
        "reportUrl" : "https://lambotik.github.io/Oblache/276//#testresult/a2ebb3de665ba7cb",
        "status" : "passed",
        "time" : {
          "start" : 1736298134242,
          "stop" : 1736298135213,
          "duration" : 971
        }
      }, {
        "uid" : "b10336371fd49d87",
        "reportUrl" : "https://lambotik.github.io/Oblache/275//#testresult/b10336371fd49d87",
        "status" : "passed",
        "time" : {
          "start" : 1736211735101,
          "stop" : 1736211736087,
          "duration" : 986
        }
      }, {
        "uid" : "85771138ece198c0",
        "reportUrl" : "https://lambotik.github.io/Oblache/274//#testresult/85771138ece198c0",
        "status" : "passed",
        "time" : {
          "start" : 1736125489657,
          "stop" : 1736125490623,
          "duration" : 966
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "787b3ea493a62c11.json",
  "parameterValues" : [ ]
}