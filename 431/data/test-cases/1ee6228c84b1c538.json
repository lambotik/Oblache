{
  "uid" : "1ee6228c84b1c538",
  "name" : "Capacity_db",
  "fullName" : "tests_api.test_bd.TestFull#test_capacity_db",
  "historyId" : "936f7fa0df691d843e1d921c6b4b86e7",
  "time" : {
    "start" : 1749690757147,
    "stop" : 1749690757499,
    "duration" : 352
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/requests/models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/json/decoder.py:338: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fa85e8ee810>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/json/decoder.py:356: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests_api.test_bd.TestFull object at 0x7fa85d6d6810>\n\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.title('Capacity_db')\n    def test_capacity_db(self):\n>       start_mb_value = API.get_profile(TestFull.token).json()['data'][\"content\"][4][1]\n\ntests_api/test_bd.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/requests/models.py:978: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/requests/models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/json/decoder.py:338: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fa85e8ee810>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/json/decoder.py:356: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests_api.test_bd.TestFull object at 0x7fa85d6d6810>\n\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.title('Capacity_db')\n    def test_capacity_db(self):\n>       start_mb_value = API.get_profile(TestFull.token).json()['data'][\"content\"][4][1]\n\ntests_api/test_bd.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/requests/models.py:978: JSONDecodeError",
    "steps" : [ {
      "name" : "Endpoint: /get_profile",
      "time" : {
        "start" : 1749690757498,
        "stop" : 1749690757498,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Request:",
      "time" : {
        "start" : 1749690757498,
        "stop" : 1749690757499,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "Headers: {'Content-Type': 'application/json', 'Authorization': 'None'}",
        "time" : {
          "start" : 1749690757498,
          "stop" : 1749690757498,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      }, {
        "name" : "Body: None",
        "time" : {
          "start" : 1749690757499,
          "stop" : 1749690757499,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 2,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "Response:",
      "time" : {
        "start" : 1749690757499,
        "stop" : 1749690757499,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "Status code: 502",
        "time" : {
          "start" : 1749690757499,
          "stop" : 1749690757499,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      }, {
        "name" : "JSON: <html>\r\n<head><title>502 Bad Gateway</title></head>\r\n<body>\r\n<center><h1>502 Bad Gateway</h1></center>\r\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\r\n</body>\r\n</html>\r\n",
        "time" : {
          "start" : 1749690757499,
          "stop" : 1749690757499,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 2,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 7,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "severity",
    "value" : "critical"
  }, {
    "name" : "epic",
    "value" : "Connection DB"
  }, {
    "name" : "suite",
    "value" : "Test Connection DB"
  }, {
    "name" : "parentSuite",
    "value" : "tests_api"
  }, {
    "name" : "subSuite",
    "value" : "TestFull"
  }, {
    "name" : "host",
    "value" : "pkrvmxyh4eaekms"
  }, {
    "name" : "thread",
    "value" : "2577-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests_api.test_bd"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "critical",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 216,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 216
      },
      "items" : [ {
        "uid" : "83b6fdcbf9e56197",
        "reportUrl" : "https://lambotik.github.io/Oblache/430//#testresult/83b6fdcbf9e56197",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1749604410948,
          "stop" : 1749604411295,
          "duration" : 347
        }
      }, {
        "uid" : "b986d7c4ca285651",
        "reportUrl" : "https://lambotik.github.io/Oblache/429//#testresult/b986d7c4ca285651",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1749518042065,
          "stop" : 1749518042546,
          "duration" : 481
        }
      }, {
        "uid" : "86b0c23b930917af",
        "reportUrl" : "https://lambotik.github.io/Oblache/428//#testresult/86b0c23b930917af",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1749431803058,
          "stop" : 1749431803564,
          "duration" : 506
        }
      }, {
        "uid" : "f619893894365189",
        "reportUrl" : "https://lambotik.github.io/Oblache/427//#testresult/f619893894365189",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1749345553896,
          "stop" : 1749345554187,
          "duration" : 291
        }
      }, {
        "uid" : "8e20a830b03428a8",
        "reportUrl" : "https://lambotik.github.io/Oblache/426//#testresult/8e20a830b03428a8",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1749258695532,
          "stop" : 1749258695928,
          "duration" : 396
        }
      }, {
        "uid" : "133df97128b51c34",
        "reportUrl" : "https://lambotik.github.io/Oblache/425//#testresult/133df97128b51c34",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1749172335801,
          "stop" : 1749172336141,
          "duration" : 340
        }
      }, {
        "uid" : "59f348b369419b69",
        "reportUrl" : "https://lambotik.github.io/Oblache/424//#testresult/59f348b369419b69",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1749085930569,
          "stop" : 1749085930875,
          "duration" : 306
        }
      }, {
        "uid" : "c112aa4e3a80ce86",
        "reportUrl" : "https://lambotik.github.io/Oblache/423//#testresult/c112aa4e3a80ce86",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1748999576508,
          "stop" : 1748999576795,
          "duration" : 287
        }
      }, {
        "uid" : "ea4290bd8afd8803",
        "reportUrl" : "https://lambotik.github.io/Oblache/422//#testresult/ea4290bd8afd8803",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1748913210131,
          "stop" : 1748913210713,
          "duration" : 582
        }
      }, {
        "uid" : "81667e2fe37a9823",
        "reportUrl" : "https://lambotik.github.io/Oblache/421//#testresult/81667e2fe37a9823",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1748826896183,
          "stop" : 1748826896630,
          "duration" : 447
        }
      }, {
        "uid" : "ad940d7a033dd458",
        "reportUrl" : "https://lambotik.github.io/Oblache/420//#testresult/ad940d7a033dd458",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1748741340255,
          "stop" : 1748741400744,
          "duration" : 60489
        }
      }, {
        "uid" : "2a8c39a8cfecb920",
        "reportUrl" : "https://lambotik.github.io/Oblache/419//#testresult/2a8c39a8cfecb920",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1748654055541,
          "stop" : 1748654115899,
          "duration" : 60358
        }
      }, {
        "uid" : "420187599ce2a837",
        "reportUrl" : "https://lambotik.github.io/Oblache/418//#testresult/420187599ce2a837",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1748567647326,
          "stop" : 1748567707609,
          "duration" : 60283
        }
      }, {
        "uid" : "c3e36ffcfbaca461",
        "reportUrl" : "https://lambotik.github.io/Oblache/417//#testresult/c3e36ffcfbaca461",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1748481121898,
          "stop" : 1748481122306,
          "duration" : 408
        }
      }, {
        "uid" : "f82aeb476951b358",
        "reportUrl" : "https://lambotik.github.io/Oblache/416//#testresult/f82aeb476951b358",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1748394732589,
          "stop" : 1748394732879,
          "duration" : 290
        }
      }, {
        "uid" : "f2cb8f6a3e1e4857",
        "reportUrl" : "https://lambotik.github.io/Oblache/415//#testresult/f2cb8f6a3e1e4857",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1748308243288,
          "stop" : 1748308243570,
          "duration" : 282
        }
      }, {
        "uid" : "b8534c4eab4400f4",
        "reportUrl" : "https://lambotik.github.io/Oblache/414//#testresult/b8534c4eab4400f4",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1748221995753,
          "stop" : 1748221996111,
          "duration" : 358
        }
      }, {
        "uid" : "dda221edf94870f6",
        "reportUrl" : "https://lambotik.github.io/Oblache/413//#testresult/dda221edf94870f6",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1748135872130,
          "stop" : 1748135872467,
          "duration" : 337
        }
      }, {
        "uid" : "5df3b859681f3928",
        "reportUrl" : "https://lambotik.github.io/Oblache/412//#testresult/5df3b859681f3928",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1748048920730,
          "stop" : 1748048921221,
          "duration" : 491
        }
      }, {
        "uid" : "8afd31fef03e39bd",
        "reportUrl" : "https://lambotik.github.io/Oblache/411//#testresult/8afd31fef03e39bd",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1747962670057,
          "stop" : 1747962670557,
          "duration" : 500
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "1ee6228c84b1c538.json",
  "parameterValues" : [ ]
}