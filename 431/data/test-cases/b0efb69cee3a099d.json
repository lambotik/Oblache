{
  "uid" : "b0efb69cee3a099d",
  "name" : "POST delete_container",
  "fullName" : "tests_api.test_bd.TestPOST#test_delete_container",
  "historyId" : "f292c4cfa0c4b2dd77724aada1d3db8c",
  "time" : {
    "start" : 1749690775187,
    "stop" : 1749690775535,
    "duration" : 348
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/requests/models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/json/decoder.py:338: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fa85e8ee810>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/json/decoder.py:356: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests_api.test_bd.TestPOST object at 0x7fa85d45cb90>\n\n    @allure.title('POST delete_container')\n    def test_delete_container(self):\n>       result = API.post_delete_docker_container(\n            token=TestPOST.token,\n            list_index=-1)\n\ntests_api/test_bd.py:415: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests_api/utils/request.py:765: in post_delete_docker_container\n    docker_uuid = list(result_list.json()['data'])[list_index]\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/requests/models.py:978: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/requests/models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/json/decoder.py:338: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fa85e8ee810>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/json/decoder.py:356: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests_api.test_bd.TestPOST object at 0x7fa85d45cb90>\n\n    @allure.title('POST delete_container')\n    def test_delete_container(self):\n>       result = API.post_delete_docker_container(\n            token=TestPOST.token,\n            list_index=-1)\n\ntests_api/test_bd.py:415: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests_api/utils/request.py:765: in post_delete_docker_container\n    docker_uuid = list(result_list.json()['data'])[list_index]\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/requests/models.py:978: JSONDecodeError",
    "steps" : [ {
      "name" : "post_delete_docker_container",
      "time" : {
        "start" : 1749690775188,
        "stop" : 1749690775534,
        "duration" : 346
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
      "statusTrace" : "  File \"/home/runner/work/Oblache/Oblache/tests_api/utils/request.py\", line 765, in post_delete_docker_container\n    docker_uuid = list(result_list.json()['data'])[list_index]\n                       ^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/requests/models.py\", line 978, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ {
        "name" : "post_container_list",
        "time" : {
          "start" : 1749690775188,
          "stop" : 1749690775534,
          "duration" : 346
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "Endpoint: /container_list",
          "time" : {
            "start" : 1749690775534,
            "stop" : 1749690775534,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : false
        }, {
          "name" : "Request:",
          "time" : {
            "start" : 1749690775534,
            "stop" : 1749690775534,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ {
            "name" : "Headers: {'Content-Type': 'application/json', 'Authorization': {None}}",
            "time" : {
              "start" : 1749690775534,
              "stop" : 1749690775534,
              "duration" : 0
            },
            "status" : "passed",
            "steps" : [ ],
            "attachments" : [ ],
            "parameters" : [ ],
            "stepsCount" : 0,
            "attachmentsCount" : 0,
            "shouldDisplayMessage" : false,
            "hasContent" : false
          }, {
            "name" : "Body: None",
            "time" : {
              "start" : 1749690775534,
              "stop" : 1749690775534,
              "duration" : 0
            },
            "status" : "passed",
            "steps" : [ ],
            "attachments" : [ ],
            "parameters" : [ ],
            "stepsCount" : 0,
            "attachmentsCount" : 0,
            "shouldDisplayMessage" : false,
            "hasContent" : false
          } ],
          "attachments" : [ ],
          "parameters" : [ ],
          "stepsCount" : 2,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : true
        }, {
          "name" : "Response:",
          "time" : {
            "start" : 1749690775534,
            "stop" : 1749690775534,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ {
            "name" : "Status code: 502",
            "time" : {
              "start" : 1749690775534,
              "stop" : 1749690775534,
              "duration" : 0
            },
            "status" : "passed",
            "steps" : [ ],
            "attachments" : [ ],
            "parameters" : [ ],
            "stepsCount" : 0,
            "attachmentsCount" : 0,
            "shouldDisplayMessage" : false,
            "hasContent" : false
          }, {
            "name" : "JSON: <html>\r\n<head><title>502 Bad Gateway</title></head>\r\n<body>\r\n<center><h1>502 Bad Gateway</h1></center>\r\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\r\n</body>\r\n</html>\r\n",
            "time" : {
              "start" : 1749690775534,
              "stop" : 1749690775534,
              "duration" : 0
            },
            "status" : "passed",
            "steps" : [ ],
            "attachments" : [ ],
            "parameters" : [ ],
            "stepsCount" : 0,
            "attachmentsCount" : 0,
            "shouldDisplayMessage" : false,
            "hasContent" : false
          } ],
          "attachments" : [ ],
          "parameters" : [ ],
          "stepsCount" : 2,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : true
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 7,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 8,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 9,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "suite",
    "value" : "POST"
  }, {
    "name" : "parentSuite",
    "value" : "tests_api"
  }, {
    "name" : "subSuite",
    "value" : "TestPOST"
  }, {
    "name" : "host",
    "value" : "pkrvmxyh4eaekms"
  }, {
    "name" : "thread",
    "value" : "2577-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests_api.test_bd"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 196,
        "broken" : 20,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 216
      },
      "items" : [ {
        "uid" : "aea9cdbf695507d9",
        "reportUrl" : "https://lambotik.github.io/Oblache/430//#testresult/aea9cdbf695507d9",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1749604429038,
          "stop" : 1749604429383,
          "duration" : 345
        }
      }, {
        "uid" : "22354e7a315ab77e",
        "reportUrl" : "https://lambotik.github.io/Oblache/429//#testresult/22354e7a315ab77e",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1749518067282,
          "stop" : 1749518067786,
          "duration" : 504
        }
      }, {
        "uid" : "ef1a524947bfe22c",
        "reportUrl" : "https://lambotik.github.io/Oblache/428//#testresult/ef1a524947bfe22c",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1749431821101,
          "stop" : 1749431821430,
          "duration" : 329
        }
      }, {
        "uid" : "be33c38524b2e9f5",
        "reportUrl" : "https://lambotik.github.io/Oblache/427//#testresult/be33c38524b2e9f5",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1749345573532,
          "stop" : 1749345594430,
          "duration" : 20898
        }
      }, {
        "uid" : "d2ea25862630c4ff",
        "reportUrl" : "https://lambotik.github.io/Oblache/426//#testresult/d2ea25862630c4ff",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1749258714591,
          "stop" : 1749258735600,
          "duration" : 21009
        }
      }, {
        "uid" : "d3d64d9668c9b3a",
        "reportUrl" : "https://lambotik.github.io/Oblache/425//#testresult/d3d64d9668c9b3a",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1749172358326,
          "stop" : 1749172379423,
          "duration" : 21097
        }
      }, {
        "uid" : "7167ad54328a0865",
        "reportUrl" : "https://lambotik.github.io/Oblache/424//#testresult/7167ad54328a0865",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1749085949631,
          "stop" : 1749085970573,
          "duration" : 20942
        }
      }, {
        "uid" : "2e5e8f494acb07f8",
        "reportUrl" : "https://lambotik.github.io/Oblache/423//#testresult/2e5e8f494acb07f8",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1748999596257,
          "stop" : 1748999617162,
          "duration" : 20905
        }
      }, {
        "uid" : "9b064944c7f48887",
        "reportUrl" : "https://lambotik.github.io/Oblache/422//#testresult/9b064944c7f48887",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1748913235450,
          "stop" : 1748913256669,
          "duration" : 21219
        }
      }, {
        "uid" : "4def1dc15a12da26",
        "reportUrl" : "https://lambotik.github.io/Oblache/421//#testresult/4def1dc15a12da26",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1748826915531,
          "stop" : 1748826936430,
          "duration" : 20899
        }
      }, {
        "uid" : "980248ead7fde3b1",
        "reportUrl" : "https://lambotik.github.io/Oblache/420//#testresult/980248ead7fde3b1",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1748744304264,
          "stop" : 1748744364756,
          "duration" : 60492
        }
      }, {
        "uid" : "c6f4ba8069a891f1",
        "reportUrl" : "https://lambotik.github.io/Oblache/419//#testresult/c6f4ba8069a891f1",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1748657014079,
          "stop" : 1748657074432,
          "duration" : 60353
        }
      }, {
        "uid" : "e3c57cd2341d8f98",
        "reportUrl" : "https://lambotik.github.io/Oblache/418//#testresult/e3c57cd2341d8f98",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1748570604283,
          "stop" : 1748570664610,
          "duration" : 60327
        }
      }, {
        "uid" : "a2bc9596381203eb",
        "reportUrl" : "https://lambotik.github.io/Oblache/417//#testresult/a2bc9596381203eb",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1748481144124,
          "stop" : 1748481165258,
          "duration" : 21134
        }
      }, {
        "uid" : "8797426760b4e0",
        "reportUrl" : "https://lambotik.github.io/Oblache/416//#testresult/8797426760b4e0",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1748394751840,
          "stop" : 1748394772764,
          "duration" : 20924
        }
      }, {
        "uid" : "ed3f898c4cd69dfc",
        "reportUrl" : "https://lambotik.github.io/Oblache/415//#testresult/ed3f898c4cd69dfc",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1748308261852,
          "stop" : 1748308282756,
          "duration" : 20904
        }
      }, {
        "uid" : "b8e9e7dd0615d870",
        "reportUrl" : "https://lambotik.github.io/Oblache/414//#testresult/b8e9e7dd0615d870",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1748222014508,
          "stop" : 1748222035405,
          "duration" : 20897
        }
      }, {
        "uid" : "b54094e2e2a66c71",
        "reportUrl" : "https://lambotik.github.io/Oblache/413//#testresult/b54094e2e2a66c71",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1748135893539,
          "stop" : 1748135914626,
          "duration" : 21087
        }
      }, {
        "uid" : "223dd4c0c570799b",
        "reportUrl" : "https://lambotik.github.io/Oblache/412//#testresult/223dd4c0c570799b",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1748048950769,
          "stop" : 1748048972257,
          "duration" : 21488
        }
      }, {
        "uid" : "e962d9bc59f2e21c",
        "reportUrl" : "https://lambotik.github.io/Oblache/411//#testresult/e962d9bc59f2e21c",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1747962691694,
          "stop" : 1747962712783,
          "duration" : 21089
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "b0efb69cee3a099d.json",
  "parameterValues" : [ ]
}