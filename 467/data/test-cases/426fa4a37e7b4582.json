{
  "uid" : "426fa4a37e7b4582",
  "name" : "Capacity_db",
  "fullName" : "tests_api.test_bd.TestFull#test_capacity_db",
  "historyId" : "936f7fa0df691d843e1d921c6b4b86e7",
  "time" : {
    "start" : 1754791964014,
    "stop" : 1754791964611,
    "duration" : 597
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/requests/models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:338: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f64484427e0>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:356: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests_api.test_bd.TestFull object at 0x7f6446fcaa20>\n\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.title('Capacity_db')\n    def test_capacity_db(self):\n>       start_mb_value = API.get_profile(TestFull.token).json()['data'][\"content\"][4][1]\n\ntests_api/test_bd.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/requests/models.py:978: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/requests/models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:338: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f64484427e0>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:356: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests_api.test_bd.TestFull object at 0x7f6446fcaa20>\n\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.title('Capacity_db')\n    def test_capacity_db(self):\n>       start_mb_value = API.get_profile(TestFull.token).json()['data'][\"content\"][4][1]\n\ntests_api/test_bd.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/requests/models.py:978: JSONDecodeError",
    "steps" : [ {
      "name" : "Endpoint: /get_profile",
      "time" : {
        "start" : 1754791964611,
        "stop" : 1754791964611,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Request:",
      "time" : {
        "start" : 1754791964611,
        "stop" : 1754791964611,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "Headers: {'Content-Type': 'application/json', 'Authorization': 'None'}",
        "time" : {
          "start" : 1754791964611,
          "stop" : 1754791964611,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      }, {
        "name" : "Body: None",
        "time" : {
          "start" : 1754791964611,
          "stop" : 1754791964611,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 2,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "Response:",
      "time" : {
        "start" : 1754791964611,
        "stop" : 1754791964611,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "Status code: 502",
        "time" : {
          "start" : 1754791964611,
          "stop" : 1754791964611,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      }, {
        "name" : "JSON: <html>\r\n<head><title>502 Bad Gateway</title></head>\r\n<body>\r\n<center><h1>502 Bad Gateway</h1></center>\r\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\r\n</body>\r\n</html>\r\n",
        "time" : {
          "start" : 1754791964611,
          "stop" : 1754791964611,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 2,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 7,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "severity",
    "value" : "critical"
  }, {
    "name" : "suite",
    "value" : "Test Connection DB"
  }, {
    "name" : "epic",
    "value" : "Connection DB"
  }, {
    "name" : "parentSuite",
    "value" : "tests_api"
  }, {
    "name" : "subSuite",
    "value" : "TestFull"
  }, {
    "name" : "host",
    "value" : "pkrvmsl9tci6h6u"
  }, {
    "name" : "thread",
    "value" : "2576-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests_api.test_bd"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "critical",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 252,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 252
      },
      "items" : [ {
        "uid" : "907a383f7bded115",
        "reportUrl" : "https://lambotik.github.io/Oblache/466//#testresult/907a383f7bded115",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1754704663824,
          "stop" : 1754704664126,
          "duration" : 302
        }
      }, {
        "uid" : "4980a23763f1de0f",
        "reportUrl" : "https://lambotik.github.io/Oblache/465//#testresult/4980a23763f1de0f",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1754618922399,
          "stop" : 1754618922978,
          "duration" : 579
        }
      }, {
        "uid" : "c7b644501f00a94e",
        "reportUrl" : "https://lambotik.github.io/Oblache/464//#testresult/c7b644501f00a94e",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1754532552961,
          "stop" : 1754532553617,
          "duration" : 656
        }
      }, {
        "uid" : "8cac258cdfe4144d",
        "reportUrl" : "https://lambotik.github.io/Oblache/463//#testresult/8cac258cdfe4144d",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1754446133958,
          "stop" : 1754446134537,
          "duration" : 579
        }
      }, {
        "uid" : "d0c3b7f170b3ead3",
        "reportUrl" : "https://lambotik.github.io/Oblache/462//#testresult/d0c3b7f170b3ead3",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1754359835635,
          "stop" : 1754359835989,
          "duration" : 354
        }
      }, {
        "uid" : "39f7a7a519d3a1a4",
        "reportUrl" : "https://lambotik.github.io/Oblache/461//#testresult/39f7a7a519d3a1a4",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1754274161172,
          "stop" : 1754274161507,
          "duration" : 335
        }
      }, {
        "uid" : "d4db69e66a6b15d3",
        "reportUrl" : "https://lambotik.github.io/Oblache/460//#testresult/d4db69e66a6b15d3",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1754187783604,
          "stop" : 1754187784075,
          "duration" : 471
        }
      }, {
        "uid" : "ec74d1175655db3b",
        "reportUrl" : "https://lambotik.github.io/Oblache/459//#testresult/ec74d1175655db3b",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1754100133922,
          "stop" : 1754100134300,
          "duration" : 378
        }
      }, {
        "uid" : "53bb6ed7b16b95b1",
        "reportUrl" : "https://lambotik.github.io/Oblache/458//#testresult/53bb6ed7b16b95b1",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1754015059644,
          "stop" : 1754015059928,
          "duration" : 284
        }
      }, {
        "uid" : "fab99bea0166fd8c",
        "reportUrl" : "https://lambotik.github.io/Oblache/457//#testresult/fab99bea0166fd8c",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1753927655773,
          "stop" : 1753927656183,
          "duration" : 410
        }
      }, {
        "uid" : "95b3b3d94cb3eabe",
        "reportUrl" : "https://lambotik.github.io/Oblache/456//#testresult/95b3b3d94cb3eabe",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1753841281893,
          "stop" : 1753841282231,
          "duration" : 338
        }
      }, {
        "uid" : "8db105b5a135aa3a",
        "reportUrl" : "https://lambotik.github.io/Oblache/455//#testresult/8db105b5a135aa3a",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1753755791404,
          "stop" : 1753755791876,
          "duration" : 472
        }
      }, {
        "uid" : "5665757671019ea0",
        "reportUrl" : "https://lambotik.github.io/Oblache/454//#testresult/5665757671019ea0",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1753668719993,
          "stop" : 1753668720446,
          "duration" : 453
        }
      }, {
        "uid" : "493726250cc9fbd7",
        "reportUrl" : "https://lambotik.github.io/Oblache/453//#testresult/493726250cc9fbd7",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1753582855595,
          "stop" : 1753582856081,
          "duration" : 486
        }
      }, {
        "uid" : "e4f3280a236b68fd",
        "reportUrl" : "https://lambotik.github.io/Oblache/452//#testresult/e4f3280a236b68fd",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1753495265964,
          "stop" : 1753495266258,
          "duration" : 294
        }
      }, {
        "uid" : "4738c20d7e74adc3",
        "reportUrl" : "https://lambotik.github.io/Oblache/451//#testresult/4738c20d7e74adc3",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1753409101230,
          "stop" : 1753409101732,
          "duration" : 502
        }
      }, {
        "uid" : "556865840d70c363",
        "reportUrl" : "https://lambotik.github.io/Oblache/450//#testresult/556865840d70c363",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1751332903649,
          "stop" : 1751332903936,
          "duration" : 287
        }
      }, {
        "uid" : "5051a718908a1f52",
        "reportUrl" : "https://lambotik.github.io/Oblache/449//#testresult/5051a718908a1f52",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1751246304103,
          "stop" : 1751246304400,
          "duration" : 297
        }
      }, {
        "uid" : "6f0b65c792554341",
        "reportUrl" : "https://lambotik.github.io/Oblache/448//#testresult/6f0b65c792554341",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1751160097296,
          "stop" : 1751160097686,
          "duration" : 390
        }
      }, {
        "uid" : "8a5d81985b79aba6",
        "reportUrl" : "https://lambotik.github.io/Oblache/447//#testresult/8a5d81985b79aba6",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1751073098370,
          "stop" : 1751073098657,
          "duration" : 287
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "426fa4a37e7b4582.json",
  "parameterValues" : [ ]
}