{
  "uid" : "67be06e90ec30d4b",
  "name" : "POST db_create",
  "fullName" : "tests_api.test_bd.TestPOST#test_post_db_create",
  "historyId" : "0b53e71177b12ce964a75d76d7986dbc",
  "time" : {
    "start" : 1748569337062,
    "stop" : 1748569337062,
    "duration" : 0
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [504]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/requests/models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/json/decoder.py:338: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7ff73f1229f0>\ns = '<html>\\r\\n<head><title>504 Gateway Time-out</title></head>\\r\\n<body>\\r\\n<center><h1>504 Gateway Time-out</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/json/decoder.py:356: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\n    @pytest.fixture()\n    def get_token():\n        \"\"\"\n        Method return:\\n\n        token: str\\n\n        body: dict\\n\n        new_password: str\\n\n        old_password: str\\n\n        email: str\n        :returns: token: str, body: dict, new_password: str, old_password:str, email: str\n        \"\"\"\n        load_dotenv()\n        email = os.getenv('EMAIL')\n        old_password = os.getenv('PASSWORD')\n        new_password = '123456789'\n        try:\n            body = {\"email\": email, \"password\": f'{old_password}'}\n            result = requests.post('https://dbend.areso.pro/login', json=body)\n            token = result.json()['token']\n            if token != {}:\n                new_password, old_password = old_password, new_password\n            Checking.check_status_code(result, 200)\n            return token, body, new_password, old_password, email\n        except Exception as ex:\n            print(ex)\n            old_password, new_password = new_password, old_password\n            body = {\"email\": email, \"password\": f'{old_password}'}\n            result = requests.post('https://dbend.areso.pro/login', json=body)\n>           token = result.json()['token']\n\nconftest.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [504]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/requests/models.py:978: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "get_token",
    "time" : {
      "start" : 1748569337062,
      "stop" : 1748569457689,
      "duration" : 120627
    },
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
    "statusTrace" : "  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/pluggy/_callers.py\", line 38, in run_old_style_hookwrapper\n    res = yield\n          ^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/pluggy/_callers.py\", line 139, in _multicall\n    teardown.throw(exception)\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/pluggy/_callers.py\", line 53, in run_old_style_hookwrapper\n    return result.get_result()\n           ^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/pluggy/_result.py\", line 103, in get_result\n    raise exc.with_traceback(tb)\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/pluggy/_callers.py\", line 38, in run_old_style_hookwrapper\n    res = yield\n          ^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/pluggy/_callers.py\", line 121, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/_pytest/fixtures.py\", line 1123, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/_pytest/fixtures.py\", line 902, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n                     ^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/Oblache/Oblache/conftest.py\", line 75, in get_token\n    token = result.json()['token']\n            ^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/requests/models.py\", line 978, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  } ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "suite",
    "value" : "POST"
  }, {
    "name" : "parentSuite",
    "value" : "tests_api"
  }, {
    "name" : "subSuite",
    "value" : "TestPOST"
  }, {
    "name" : "host",
    "value" : "pkrvmf6wy0o8zjz"
  }, {
    "name" : "thread",
    "value" : "2708-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests_api.test_bd"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 188,
        "broken" : 14,
        "skipped" : 0,
        "passed" : 1,
        "unknown" : 0,
        "total" : 203
      },
      "items" : [ {
        "uid" : "82f3202988fb390",
        "reportUrl" : "https://lambotik.github.io/Oblache/417//#testresult/82f3202988fb390",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1748481134401,
          "stop" : 1748481135130,
          "duration" : 729
        }
      }, {
        "uid" : "7bd6815bfd1794e9",
        "reportUrl" : "https://lambotik.github.io/Oblache/416//#testresult/7bd6815bfd1794e9",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1748394743363,
          "stop" : 1748394743990,
          "duration" : 627
        }
      }, {
        "uid" : "5d26c73f7b3e202",
        "reportUrl" : "https://lambotik.github.io/Oblache/415//#testresult/5d26c73f7b3e202",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1748308253737,
          "stop" : 1748308254387,
          "duration" : 650
        }
      }, {
        "uid" : "360ba25dcb0117d7",
        "reportUrl" : "https://lambotik.github.io/Oblache/414//#testresult/360ba25dcb0117d7",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1748222006240,
          "stop" : 1748222006850,
          "duration" : 610
        }
      }, {
        "uid" : "2d438c03a6166bc0",
        "reportUrl" : "https://lambotik.github.io/Oblache/413//#testresult/2d438c03a6166bc0",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1748135884007,
          "stop" : 1748135884750,
          "duration" : 743
        }
      }, {
        "uid" : "87233dec22c8e65",
        "reportUrl" : "https://lambotik.github.io/Oblache/412//#testresult/87233dec22c8e65",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1748048937438,
          "stop" : 1748048938445,
          "duration" : 1007
        }
      }, {
        "uid" : "b9fe6f57e55dc3b9",
        "reportUrl" : "https://lambotik.github.io/Oblache/411//#testresult/b9fe6f57e55dc3b9",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1747962682114,
          "stop" : 1747962682854,
          "duration" : 740
        }
      }, {
        "uid" : "e6aa006cab30882c",
        "reportUrl" : "https://lambotik.github.io/Oblache/410//#testresult/e6aa006cab30882c",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1747876290286,
          "stop" : 1747876291010,
          "duration" : 724
        }
      }, {
        "uid" : "235ba3815ba9f428",
        "reportUrl" : "https://lambotik.github.io/Oblache/409//#testresult/235ba3815ba9f428",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1747789927550,
          "stop" : 1747789928288,
          "duration" : 738
        }
      }, {
        "uid" : "f2d84242c19e428b",
        "reportUrl" : "https://lambotik.github.io/Oblache/408//#testresult/f2d84242c19e428b",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1747703559092,
          "stop" : 1747703559712,
          "duration" : 620
        }
      }, {
        "uid" : "988023e9395b9b23",
        "reportUrl" : "https://lambotik.github.io/Oblache/407//#testresult/988023e9395b9b23",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1747617273095,
          "stop" : 1747617273734,
          "duration" : 639
        }
      }, {
        "uid" : "c8dc2ec4833ff165",
        "reportUrl" : "https://lambotik.github.io/Oblache/406//#testresult/c8dc2ec4833ff165",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1747530968183,
          "stop" : 1747530968921,
          "duration" : 738
        }
      }, {
        "uid" : "9e64f9176f683015",
        "reportUrl" : "https://lambotik.github.io/Oblache/405//#testresult/9e64f9176f683015",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1747444212066,
          "stop" : 1747444212807,
          "duration" : 741
        }
      }, {
        "uid" : "9dc393b2a63e8411",
        "reportUrl" : "https://lambotik.github.io/Oblache/404//#testresult/9dc393b2a63e8411",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1747357913718,
          "stop" : 1747357914351,
          "duration" : 633
        }
      }, {
        "uid" : "a64ac6348b4ba180",
        "reportUrl" : "https://lambotik.github.io/Oblache/403//#testresult/a64ac6348b4ba180",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1747271308506,
          "stop" : 1747271309139,
          "duration" : 633
        }
      }, {
        "uid" : "68e90156384d9ff8",
        "reportUrl" : "https://lambotik.github.io/Oblache/402//#testresult/68e90156384d9ff8",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1747185048817,
          "stop" : 1747185049822,
          "duration" : 1005
        }
      }, {
        "uid" : "c4cf01964dff38a0",
        "reportUrl" : "https://lambotik.github.io/Oblache/401//#testresult/c4cf01964dff38a0",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1747098719832,
          "stop" : 1747098720557,
          "duration" : 725
        }
      }, {
        "uid" : "58c24c5e65d81bb1",
        "reportUrl" : "https://lambotik.github.io/Oblache/400//#testresult/58c24c5e65d81bb1",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1747012422517,
          "stop" : 1747012423349,
          "duration" : 832
        }
      }, {
        "uid" : "68284374e0246ea",
        "reportUrl" : "https://lambotik.github.io/Oblache/399//#testresult/68284374e0246ea",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1746926120481,
          "stop" : 1746926121489,
          "duration" : 1008
        }
      }, {
        "uid" : "b052ee6afcd4c368",
        "reportUrl" : "https://lambotik.github.io/Oblache/398//#testresult/b052ee6afcd4c368",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1746839282176,
          "stop" : 1746839282803,
          "duration" : 627
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "67be06e90ec30d4b.json",
  "parameterValues" : [ ]
}