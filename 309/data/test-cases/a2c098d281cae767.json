{
  "uid" : "a2c098d281cae767",
  "name" : "POST delete_container",
  "fullName" : "tests_api.test_bd.TestPOST#test_delete_container",
  "historyId" : "f292c4cfa0c4b2dd77724aada1d3db8c",
  "time" : {
    "start" : 1739152569437,
    "stop" : 1739152629726,
    "duration" : 60289
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [504]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/requests/models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/json/decoder.py:338: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7ffb967e2960>\ns = '<html>\\r\\n<head><title>504 Gateway Time-out</title></head>\\r\\n<body>\\r\\n<center><h1>504 Gateway Time-out</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/json/decoder.py:356: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests_api.test_bd.TestPOST object at 0x7ffb955e6030>\n\n    @allure.title('POST delete_container')\n    def test_delete_container(self):\n>       result = API.post_delete_docker_container(\n            token=TestPOST.token,\n            list_index=-1)\n\ntests_api/test_bd.py:415: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests_api/utils/request.py:843: in post_delete_docker_container\n    docker_uuid = list(result_list.json()['data'])[list_index]\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [504]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/requests/models.py:978: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [504]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/requests/models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/json/decoder.py:338: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7ffb967e2960>\ns = '<html>\\r\\n<head><title>504 Gateway Time-out</title></head>\\r\\n<body>\\r\\n<center><h1>504 Gateway Time-out</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/json/decoder.py:356: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests_api.test_bd.TestPOST object at 0x7ffb955e6030>\n\n    @allure.title('POST delete_container')\n    def test_delete_container(self):\n>       result = API.post_delete_docker_container(\n            token=TestPOST.token,\n            list_index=-1)\n\ntests_api/test_bd.py:415: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests_api/utils/request.py:843: in post_delete_docker_container\n    docker_uuid = list(result_list.json()['data'])[list_index]\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [504]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/requests/models.py:978: JSONDecodeError",
    "steps" : [ {
      "name" : "post_delete_docker_container",
      "time" : {
        "start" : 1739152569437,
        "stop" : 1739152629726,
        "duration" : 60289
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
      "statusTrace" : "  File \"/home/runner/work/Oblache/Oblache/tests_api/utils/request.py\", line 843, in post_delete_docker_container\n    docker_uuid = list(result_list.json()['data'])[list_index]\n                       ^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/requests/models.py\", line 978, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ {
        "name" : "post_container_list",
        "time" : {
          "start" : 1739152569437,
          "stop" : 1739152629726,
          "duration" : 60289
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "Endpoint: /container_list",
          "time" : {
            "start" : 1739152629725,
            "stop" : 1739152629725,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : false
        }, {
          "name" : "Request:",
          "time" : {
            "start" : 1739152629725,
            "stop" : 1739152629726,
            "duration" : 1
          },
          "status" : "passed",
          "steps" : [ {
            "name" : "Url: https://dbend.areso.pro/container_list",
            "time" : {
              "start" : 1739152629726,
              "stop" : 1739152629726,
              "duration" : 0
            },
            "status" : "passed",
            "steps" : [ ],
            "attachments" : [ ],
            "parameters" : [ ],
            "stepsCount" : 0,
            "attachmentsCount" : 0,
            "shouldDisplayMessage" : false,
            "hasContent" : false
          }, {
            "name" : "Headers: {'Content-Type': 'application/json', 'Authorization': 'None'}",
            "time" : {
              "start" : 1739152629726,
              "stop" : 1739152629726,
              "duration" : 0
            },
            "status" : "passed",
            "steps" : [ ],
            "attachments" : [ ],
            "parameters" : [ ],
            "stepsCount" : 0,
            "attachmentsCount" : 0,
            "shouldDisplayMessage" : false,
            "hasContent" : false
          }, {
            "name" : "Body: None",
            "time" : {
              "start" : 1739152629726,
              "stop" : 1739152629726,
              "duration" : 0
            },
            "status" : "passed",
            "steps" : [ ],
            "attachments" : [ ],
            "parameters" : [ ],
            "stepsCount" : 0,
            "attachmentsCount" : 0,
            "shouldDisplayMessage" : false,
            "hasContent" : false
          } ],
          "attachments" : [ ],
          "parameters" : [ ],
          "stepsCount" : 3,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : true
        }, {
          "name" : "Response:",
          "time" : {
            "start" : 1739152629726,
            "stop" : 1739152629726,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ {
            "name" : "Status code: 504",
            "time" : {
              "start" : 1739152629726,
              "stop" : 1739152629726,
              "duration" : 0
            },
            "status" : "passed",
            "steps" : [ ],
            "attachments" : [ ],
            "parameters" : [ ],
            "stepsCount" : 0,
            "attachmentsCount" : 0,
            "shouldDisplayMessage" : false,
            "hasContent" : false
          }, {
            "name" : "JSON: <html>\r\n<head><title>504 Gateway Time-out</title></head>\r\n<body>\r\n<center><h1>504 Gateway Time-out</h1></center>\r\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\r\n</body>\r\n</html>\r\n",
            "time" : {
              "start" : 1739152629726,
              "stop" : 1739152629726,
              "duration" : 0
            },
            "status" : "passed",
            "steps" : [ ],
            "attachments" : [ ],
            "parameters" : [ ],
            "stepsCount" : 0,
            "attachmentsCount" : 0,
            "shouldDisplayMessage" : false,
            "hasContent" : false
          } ],
          "attachments" : [ ],
          "parameters" : [ ],
          "stepsCount" : 2,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : true
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 8,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 9,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 10,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "suite",
    "value" : "POST"
  }, {
    "name" : "parentSuite",
    "value" : "tests_api"
  }, {
    "name" : "subSuite",
    "value" : "TestPOST"
  }, {
    "name" : "host",
    "value" : "fv-az1068-564"
  }, {
    "name" : "thread",
    "value" : "2444-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests_api.test_bd"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 83,
        "broken" : 9,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 92
      },
      "items" : [ {
        "uid" : "c106a4b61b28c605",
        "reportUrl" : "https://lambotik.github.io/Oblache/308//#testresult/c106a4b61b28c605",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1739066272528,
          "stop" : 1739066333007,
          "duration" : 60479
        }
      }, {
        "uid" : "2800beec8177c051",
        "reportUrl" : "https://lambotik.github.io/Oblache/307//#testresult/2800beec8177c051",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1738979583326,
          "stop" : 1738979643815,
          "duration" : 60489
        }
      }, {
        "uid" : "80fe3f999d4be0a",
        "reportUrl" : "https://lambotik.github.io/Oblache/306//#testresult/80fe3f999d4be0a",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1738893313984,
          "stop" : 1738893374471,
          "duration" : 60487
        }
      }, {
        "uid" : "a08642507bc968f8",
        "reportUrl" : "https://lambotik.github.io/Oblache/305//#testresult/a08642507bc968f8",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1738806884847,
          "stop" : 1738806945192,
          "duration" : 60345
        }
      }, {
        "uid" : "283b828b274aba1c",
        "reportUrl" : "https://lambotik.github.io/Oblache/304//#testresult/283b828b274aba1c",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1738720473168,
          "stop" : 1738720533507,
          "duration" : 60339
        }
      }, {
        "uid" : "d6c025c0b1a3e01d",
        "reportUrl" : "https://lambotik.github.io/Oblache/303//#testresult/d6c025c0b1a3e01d",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1738634038912,
          "stop" : 1738634099420,
          "duration" : 60508
        }
      }, {
        "uid" : "a635d6f15f8038c0",
        "reportUrl" : "https://lambotik.github.io/Oblache/302//#testresult/a635d6f15f8038c0",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1738547693846,
          "stop" : 1738547754275,
          "duration" : 60429
        }
      }, {
        "uid" : "b93a69bb75b02bce",
        "reportUrl" : "https://lambotik.github.io/Oblache/301//#testresult/b93a69bb75b02bce",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1738461417990,
          "stop" : 1738461478407,
          "duration" : 60417
        }
      }, {
        "uid" : "ed117267408e0be7",
        "reportUrl" : "https://lambotik.github.io/Oblache/300//#testresult/ed117267408e0be7",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1738371875956,
          "stop" : 1738371897497,
          "duration" : 21541
        }
      }, {
        "uid" : "102f002d2450a381",
        "reportUrl" : "https://lambotik.github.io/Oblache/299//#testresult/102f002d2450a381",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1738350584153,
          "stop" : 1738350605080,
          "duration" : 20927
        }
      }, {
        "uid" : "1a07dfc1c7940d9f",
        "reportUrl" : "https://lambotik.github.io/Oblache/298//#testresult/1a07dfc1c7940d9f",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1738198774378,
          "stop" : 1738198795279,
          "duration" : 20901
        }
      }, {
        "uid" : "4e412e50e707b29f",
        "reportUrl" : "https://lambotik.github.io/Oblache/297//#testresult/4e412e50e707b29f",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1738112428985,
          "stop" : 1738112449887,
          "duration" : 20902
        }
      }, {
        "uid" : "52a2a15988b0e139",
        "reportUrl" : "https://lambotik.github.io/Oblache/296//#testresult/52a2a15988b0e139",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1738026041262,
          "stop" : 1738026062212,
          "duration" : 20950
        }
      }, {
        "uid" : "c196df121f076c67",
        "reportUrl" : "https://lambotik.github.io/Oblache/295//#testresult/c196df121f076c67",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1737939720464,
          "stop" : 1737939741538,
          "duration" : 21074
        }
      }, {
        "uid" : "f67f038ad03457cc",
        "reportUrl" : "https://lambotik.github.io/Oblache/294//#testresult/f67f038ad03457cc",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1737853371177,
          "stop" : 1737853392743,
          "duration" : 21566
        }
      }, {
        "uid" : "79b75b51901fc07a",
        "reportUrl" : "https://lambotik.github.io/Oblache/293//#testresult/79b75b51901fc07a",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1737766670153,
          "stop" : 1737766691678,
          "duration" : 21525
        }
      }, {
        "uid" : "367854283b431565",
        "reportUrl" : "https://lambotik.github.io/Oblache/292//#testresult/367854283b431565",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1737680506338,
          "stop" : 1737680527859,
          "duration" : 21521
        }
      }, {
        "uid" : "60672fa474fac4a4",
        "reportUrl" : "https://lambotik.github.io/Oblache/291//#testresult/60672fa474fac4a4",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1737594034077,
          "stop" : 1737594054991,
          "duration" : 20914
        }
      }, {
        "uid" : "c20832fc5028e9a3",
        "reportUrl" : "https://lambotik.github.io/Oblache/290//#testresult/c20832fc5028e9a3",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1737507718978,
          "stop" : 1737507739968,
          "duration" : 20990
        }
      }, {
        "uid" : "e9bc8a389b91206c",
        "reportUrl" : "https://lambotik.github.io/Oblache/289//#testresult/e9bc8a389b91206c",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1737421200887,
          "stop" : 1737421221835,
          "duration" : 20948
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "a2c098d281cae767.json",
  "parameterValues" : [ ]
}