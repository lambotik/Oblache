{
  "uid" : "cc0cfb042ba55510",
  "name" : "POST db_create",
  "fullName" : "tests_api.test_bd.TestPOST#test_post_db_create",
  "historyId" : "0b53e71177b12ce964a75d76d7986dbc",
  "time" : {
    "start" : 1743901866798,
    "stop" : 1743901866798,
    "duration" : 0
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/requests/models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/json/decoder.py:338: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fe6463f6ea0>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/json/decoder.py:356: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\n    @pytest.fixture()\n    def get_token():\n        \"\"\"\n        Method return:\\n\n        token: str\\n\n        body: dict\\n\n        new_password: str\\n\n        old_password: str\\n\n        email: str\n        :returns: token: str, body: dict, new_password: str, old_password:str, email: str\n        \"\"\"\n        load_dotenv()\n        email = os.getenv('EMAIL')\n        old_password = os.getenv('PASSWORD')\n        new_password = '123456789'\n        try:\n            body = {\"email\": email, \"password\": f'{old_password}'}\n            result = requests.post('https://dbend.areso.pro/login', json=body)\n            token = result.json()['token']\n            if token != {}:\n                new_password, old_password = old_password, new_password\n            Checking.check_status_code(result, 200)\n            return token, body, new_password, old_password, email\n        except Exception as ex:\n            print(ex)\n            old_password, new_password = new_password, old_password\n            body = {\"email\": email, \"password\": f'{old_password}'}\n            result = requests.post('https://dbend.areso.pro/login', json=body)\n>           token = result.json()['token']\n\nconftest.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/requests/models.py:978: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "get_token",
    "time" : {
      "start" : 1743901866798,
      "stop" : 1743901867353,
      "duration" : 555
    },
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
    "statusTrace" : "  File \"/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/_pytest/fixtures.py\", line 1123, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/_pytest/fixtures.py\", line 902, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n                     ^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/Oblache/Oblache/conftest.py\", line 75, in get_token\n    token = result.json()['token']\n            ^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/requests/models.py\", line 978, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  } ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "suite",
    "value" : "POST"
  }, {
    "name" : "parentSuite",
    "value" : "tests_api"
  }, {
    "name" : "subSuite",
    "value" : "TestPOST"
  }, {
    "name" : "host",
    "value" : "fv-az1341-331"
  }, {
    "name" : "thread",
    "value" : "2519-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests_api.test_bd"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 139,
        "broken" : 12,
        "skipped" : 0,
        "passed" : 1,
        "unknown" : 0,
        "total" : 152
      },
      "items" : [ {
        "uid" : "72201083868c97ae",
        "reportUrl" : "https://lambotik.github.io/Oblache/363//#testresult/72201083868c97ae",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1743815139817,
          "stop" : 1743815140461,
          "duration" : 644
        }
      }, {
        "uid" : "f0c0b8e616ca86d2",
        "reportUrl" : "https://lambotik.github.io/Oblache/362//#testresult/f0c0b8e616ca86d2",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1743728796770,
          "stop" : 1743728797815,
          "duration" : 1045
        }
      }, {
        "uid" : "7fca2b6fbea41098",
        "reportUrl" : "https://lambotik.github.io/Oblache/361//#testresult/7fca2b6fbea41098",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1743642410551,
          "stop" : 1743642411305,
          "duration" : 754
        }
      }, {
        "uid" : "339c33d247c2c11b",
        "reportUrl" : "https://lambotik.github.io/Oblache/360//#testresult/339c33d247c2c11b",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1743556067065,
          "stop" : 1743556067812,
          "duration" : 747
        }
      }, {
        "uid" : "bc51ce3ec8db60d4",
        "reportUrl" : "https://lambotik.github.io/Oblache/359//#testresult/bc51ce3ec8db60d4",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1743470100571,
          "stop" : 1743470101249,
          "duration" : 678
        }
      }, {
        "uid" : "a92af111c8c2e24e",
        "reportUrl" : "https://lambotik.github.io/Oblache/358//#testresult/a92af111c8c2e24e",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1743383435224,
          "stop" : 1743383436226,
          "duration" : 1002
        }
      }, {
        "uid" : "3544995f8fefa1ff",
        "reportUrl" : "https://lambotik.github.io/Oblache/357//#testresult/3544995f8fefa1ff",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1743297102343,
          "stop" : 1743297102972,
          "duration" : 629
        }
      }, {
        "uid" : "d263d93823588e20",
        "reportUrl" : "https://lambotik.github.io/Oblache/356//#testresult/d263d93823588e20",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1743210326951,
          "stop" : 1743210327589,
          "duration" : 638
        }
      }, {
        "uid" : "37cced578e2b4db1",
        "reportUrl" : "https://lambotik.github.io/Oblache/355//#testresult/37cced578e2b4db1",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1743123961149,
          "stop" : 1743123961897,
          "duration" : 748
        }
      }, {
        "uid" : "d2b0d1d80878701c",
        "reportUrl" : "https://lambotik.github.io/Oblache/354//#testresult/d2b0d1d80878701c",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1743037568761,
          "stop" : 1743037569550,
          "duration" : 789
        }
      }, {
        "uid" : "df4b05c46f969b7a",
        "reportUrl" : "https://lambotik.github.io/Oblache/353//#testresult/df4b05c46f969b7a",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1742951178489,
          "stop" : 1742951179104,
          "duration" : 615
        }
      }, {
        "uid" : "a2d94571d7693852",
        "reportUrl" : "https://lambotik.github.io/Oblache/352//#testresult/a2d94571d7693852",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1742864793223,
          "stop" : 1742864793907,
          "duration" : 684
        }
      }, {
        "uid" : "397ebcfb4733ad22",
        "reportUrl" : "https://lambotik.github.io/Oblache/351//#testresult/397ebcfb4733ad22",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1742778493167,
          "stop" : 1742778494175,
          "duration" : 1008
        }
      }, {
        "uid" : "e6531e84558ce738",
        "reportUrl" : "https://lambotik.github.io/Oblache/350//#testresult/e6531e84558ce738",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1742692241290,
          "stop" : 1742692242043,
          "duration" : 753
        }
      }, {
        "uid" : "ceacad2f9c29a1e9",
        "reportUrl" : "https://lambotik.github.io/Oblache/349//#testresult/ceacad2f9c29a1e9",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1742605479280,
          "stop" : 1742605479903,
          "duration" : 623
        }
      }, {
        "uid" : "bfc4e7dfe031be53",
        "reportUrl" : "https://lambotik.github.io/Oblache/348//#testresult/bfc4e7dfe031be53",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1742519175511,
          "stop" : 1742519176521,
          "duration" : 1010
        }
      }, {
        "uid" : "ca0265770dc60855",
        "reportUrl" : "https://lambotik.github.io/Oblache/347//#testresult/ca0265770dc60855",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1742432681361,
          "stop" : 1742432682075,
          "duration" : 714
        }
      }, {
        "uid" : "4639f706d7962fb",
        "reportUrl" : "https://lambotik.github.io/Oblache/346//#testresult/4639f706d7962fb",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1742346369907,
          "stop" : 1742346370524,
          "duration" : 617
        }
      }, {
        "uid" : "88ab1317d7c3d8ae",
        "reportUrl" : "https://lambotik.github.io/Oblache/345//#testresult/88ab1317d7c3d8ae",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1742259923118,
          "stop" : 1742259924133,
          "duration" : 1015
        }
      }, {
        "uid" : "f59305061d98d8c5",
        "reportUrl" : "https://lambotik.github.io/Oblache/344//#testresult/f59305061d98d8c5",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1742173645601,
          "stop" : 1742173646461,
          "duration" : 860
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "cc0cfb042ba55510.json",
  "parameterValues" : [ ]
}