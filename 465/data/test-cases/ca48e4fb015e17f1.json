{
  "uid" : "ca48e4fb015e17f1",
  "name" : "GET probe.",
  "fullName" : "tests_api.test_get.TestGET#test_get_probe",
  "historyId" : "0a01f69388168ce0dd456f2b87422cf5",
  "time" : {
    "start" : 1754618957842,
    "stop" : 1754618958306,
    "duration" : 464
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: Incorrect status code: 502",
  "statusTrace" : "self = <tests_api.test_get.TestGET object at 0x7f87e8f9f080>\n\n    @allure.title('GET probe.')\n    def test_get_probe(self):\n        response = API.get_probe()\n>       Checking.check_status_code(response, 200)\n\ntests_api/test_get.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresult = <Response [502]>, status_code = 200\n\n    @staticmethod\n    def check_status_code(result: requests.models.Response, status_code: int):\n        \"\"\"\n        Method check status code\n        :param result: Response\n        :param status_code:\n        \"\"\"\n        with allure.step(f'Assert status code: {status_code} == Response status code: {result.status_code}'):\n>           assert status_code == result.status_code, f'Incorrect status code: {result.status_code}'\nE           AssertionError: Incorrect status code: 502\n\ntests_api/utils/checking.py:16: AssertionError",
  "flaky" : true,
  "newFailed" : true,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: Incorrect status code: 502",
    "statusTrace" : "self = <tests_api.test_get.TestGET object at 0x7f87e8f9f080>\n\n    @allure.title('GET probe.')\n    def test_get_probe(self):\n        response = API.get_probe()\n>       Checking.check_status_code(response, 200)\n\ntests_api/test_get.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresult = <Response [502]>, status_code = 200\n\n    @staticmethod\n    def check_status_code(result: requests.models.Response, status_code: int):\n        \"\"\"\n        Method check status code\n        :param result: Response\n        :param status_code:\n        \"\"\"\n        with allure.step(f'Assert status code: {status_code} == Response status code: {result.status_code}'):\n>           assert status_code == result.status_code, f'Incorrect status code: {result.status_code}'\nE           AssertionError: Incorrect status code: 502\n\ntests_api/utils/checking.py:16: AssertionError",
    "steps" : [ {
      "name" : "Endpoint: /probe",
      "time" : {
        "start" : 1754618958306,
        "stop" : 1754618958306,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : false,
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "Request:",
      "time" : {
        "start" : 1754618958306,
        "stop" : 1754618958306,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "Headers: {'Content-Type': 'application/json', 'Authorization': ''}",
        "time" : {
          "start" : 1754618958306,
          "stop" : 1754618958306,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "hasContent" : false,
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false
      }, {
        "name" : "Body: None",
        "time" : {
          "start" : 1754618958306,
          "stop" : 1754618958306,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "hasContent" : false,
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 2,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "Response:",
      "time" : {
        "start" : 1754618958306,
        "stop" : 1754618958306,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "Status code: 502",
        "time" : {
          "start" : 1754618958306,
          "stop" : 1754618958306,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "hasContent" : false,
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false
      }, {
        "name" : "JSON: <html>\r\n<head><title>502 Bad Gateway</title></head>\r\n<body>\r\n<center><h1>502 Bad Gateway</h1></center>\r\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\r\n</body>\r\n</html>\r\n",
        "time" : {
          "start" : 1754618958306,
          "stop" : 1754618958306,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "hasContent" : false,
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 2,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "Assert status code: 200 == Response status code: 502",
      "time" : {
        "start" : 1754618958306,
        "stop" : 1754618958306,
        "duration" : 0
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: Incorrect status code: 502\n",
      "statusTrace" : "  File \"/home/runner/work/Oblache/Oblache/tests_api/utils/checking.py\", line 16, in check_status_code\n    assert status_code == result.status_code, f'Incorrect status code: {result.status_code}'\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 8,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "suite",
    "value" : "GET"
  }, {
    "name" : "severity",
    "value" : "critical"
  }, {
    "name" : "epic",
    "value" : "Connection DB"
  }, {
    "name" : "parentSuite",
    "value" : "tests_api"
  }, {
    "name" : "subSuite",
    "value" : "TestGET"
  }, {
    "name" : "host",
    "value" : "pkrvmjbmru5nbw0"
  }, {
    "name" : "thread",
    "value" : "2667-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests_api.test_get"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "critical",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 2,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 13,
        "unknown" : 0,
        "total" : 15
      },
      "items" : [ {
        "uid" : "13a8ce064eb632de",
        "reportUrl" : "https://lambotik.github.io/Oblache/464//#testresult/13a8ce064eb632de",
        "status" : "passed",
        "time" : {
          "start" : 1754532709388,
          "stop" : 1754532709899,
          "duration" : 511
        }
      }, {
        "uid" : "acc5f50120f1d58c",
        "reportUrl" : "https://lambotik.github.io/Oblache/463//#testresult/acc5f50120f1d58c",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 502",
        "time" : {
          "start" : 1754446173365,
          "stop" : 1754446173861,
          "duration" : 496
        }
      }, {
        "uid" : "c79825d63f69e112",
        "reportUrl" : "https://lambotik.github.io/Oblache/462//#testresult/c79825d63f69e112",
        "status" : "passed",
        "time" : {
          "start" : 1754359963961,
          "stop" : 1754359964316,
          "duration" : 355
        }
      }, {
        "uid" : "1416f6e6a05fac95",
        "reportUrl" : "https://lambotik.github.io/Oblache/461//#testresult/1416f6e6a05fac95",
        "status" : "passed",
        "time" : {
          "start" : 1754274287999,
          "stop" : 1754274288362,
          "duration" : 363
        }
      }, {
        "uid" : "63f0fb5c35d31e18",
        "reportUrl" : "https://lambotik.github.io/Oblache/460//#testresult/63f0fb5c35d31e18",
        "status" : "passed",
        "time" : {
          "start" : 1754187951566,
          "stop" : 1754187952060,
          "duration" : 494
        }
      }, {
        "uid" : "2ec01baef7b26661",
        "reportUrl" : "https://lambotik.github.io/Oblache/459//#testresult/2ec01baef7b26661",
        "status" : "passed",
        "time" : {
          "start" : 1754100284199,
          "stop" : 1754100284565,
          "duration" : 366
        }
      }, {
        "uid" : "ed16cc34e94b5e57",
        "reportUrl" : "https://lambotik.github.io/Oblache/458//#testresult/ed16cc34e94b5e57",
        "status" : "passed",
        "time" : {
          "start" : 1754015205987,
          "stop" : 1754015206285,
          "duration" : 298
        }
      }, {
        "uid" : "cd618c73a50b152e",
        "reportUrl" : "https://lambotik.github.io/Oblache/457//#testresult/cd618c73a50b152e",
        "status" : "passed",
        "time" : {
          "start" : 1753927785848,
          "stop" : 1753927786255,
          "duration" : 407
        }
      }, {
        "uid" : "737f3db8c1d8c0c9",
        "reportUrl" : "https://lambotik.github.io/Oblache/456//#testresult/737f3db8c1d8c0c9",
        "status" : "passed",
        "time" : {
          "start" : 1753841388175,
          "stop" : 1753841388552,
          "duration" : 377
        }
      }, {
        "uid" : "1c0b20b99402331",
        "reportUrl" : "https://lambotik.github.io/Oblache/455//#testresult/1c0b20b99402331",
        "status" : "passed",
        "time" : {
          "start" : 1753755947569,
          "stop" : 1753755948080,
          "duration" : 511
        }
      }, {
        "uid" : "b9cb959c269d9e",
        "reportUrl" : "https://lambotik.github.io/Oblache/454//#testresult/b9cb959c269d9e",
        "status" : "passed",
        "time" : {
          "start" : 1753668831864,
          "stop" : 1753668832351,
          "duration" : 487
        }
      }, {
        "uid" : "417414b03dc07f3b",
        "reportUrl" : "https://lambotik.github.io/Oblache/453//#testresult/417414b03dc07f3b",
        "status" : "passed",
        "time" : {
          "start" : 1753582969303,
          "stop" : 1753582969819,
          "duration" : 516
        }
      }, {
        "uid" : "5581c721b66e4569",
        "reportUrl" : "https://lambotik.github.io/Oblache/452//#testresult/5581c721b66e4569",
        "status" : "passed",
        "time" : {
          "start" : 1753495366058,
          "stop" : 1753495366361,
          "duration" : 303
        }
      }, {
        "uid" : "c5e704982749bb4c",
        "reportUrl" : "https://lambotik.github.io/Oblache/451//#testresult/c5e704982749bb4c",
        "status" : "passed",
        "time" : {
          "start" : 1753409206952,
          "stop" : 1753409207336,
          "duration" : 384
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "ca48e4fb015e17f1.json",
  "parameterValues" : [ ]
}