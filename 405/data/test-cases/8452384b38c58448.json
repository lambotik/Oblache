{
  "uid" : "8452384b38c58448",
  "name" : "POST checking ports_len positive",
  "fullName" : "tests_api.test_bd.TestPOST#test_post_checking_ports_len_positive",
  "historyId" : "c6f631852f230d7f46e21d1143ab0d56",
  "time" : {
    "start" : 1747444219405,
    "stop" : 1747444219763,
    "duration" : 358
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: Incorrect status code: 400",
  "statusTrace" : "self = <tests_api.test_bd.TestPOST object at 0x7f4dbdd5eea0>\n\n    @allure.title('POST checking ports_len positive')\n    def test_post_checking_ports_len_positive(self):\n        result = API.post_create_docker_container_checking_ports(\n            token=TestPOST.token,\n            port_len=\"80-89\")\n>       Checking.check_status_code(result, 201)\n\ntests_api/test_bd.py:374: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresult = <Response [400]>, status_code = 201\n\n    @staticmethod\n    def check_status_code(result: requests.models.Response, status_code: int):\n        \"\"\"\n        Method check status code\n        :param result: Response\n        :param status_code:\n        \"\"\"\n        with allure.step(f'Assert status code: {status_code} == Response status code: {result.status_code}'):\n>           assert status_code == result.status_code, f'Incorrect status code: {result.status_code}'\nE           AssertionError: Incorrect status code: 400\n\ntests_api/utils/checking.py:16: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: Incorrect status code: 400",
    "statusTrace" : "self = <tests_api.test_bd.TestPOST object at 0x7f4dbdd5eea0>\n\n    @allure.title('POST checking ports_len positive')\n    def test_post_checking_ports_len_positive(self):\n        result = API.post_create_docker_container_checking_ports(\n            token=TestPOST.token,\n            port_len=\"80-89\")\n>       Checking.check_status_code(result, 201)\n\ntests_api/test_bd.py:374: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresult = <Response [400]>, status_code = 201\n\n    @staticmethod\n    def check_status_code(result: requests.models.Response, status_code: int):\n        \"\"\"\n        Method check status code\n        :param result: Response\n        :param status_code:\n        \"\"\"\n        with allure.step(f'Assert status code: {status_code} == Response status code: {result.status_code}'):\n>           assert status_code == result.status_code, f'Incorrect status code: {result.status_code}'\nE           AssertionError: Incorrect status code: 400\n\ntests_api/utils/checking.py:16: AssertionError",
    "steps" : [ {
      "name" : "post_create_docker_container",
      "time" : {
        "start" : 1747444219405,
        "stop" : 1747444219763,
        "duration" : 358
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "Endpoint: /container_create",
        "time" : {
          "start" : 1747444219763,
          "stop" : 1747444219763,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      }, {
        "name" : "Request:",
        "time" : {
          "start" : 1747444219763,
          "stop" : 1747444219763,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "Headers: {'Content-Type': 'application/json', 'Authorization': {'b66ecc0a-50ac-43c7-a336-ca4486b6346e'}}",
          "time" : {
            "start" : 1747444219763,
            "stop" : 1747444219763,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : false
        }, {
          "name" : "Body: {\"docker_image\": \"nginx\", \"int_ports\": f\"80-89\", \"env\": 3, \"region\": 3}",
          "time" : {
            "start" : 1747444219763,
            "stop" : 1747444219763,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : false
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 2,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : true
      }, {
        "name" : "Response:",
        "time" : {
          "start" : 1747444219763,
          "stop" : 1747444219763,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "Status code: 400",
          "time" : {
            "start" : 1747444219763,
            "stop" : 1747444219763,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : false
        }, {
          "name" : "JSON: {\n    \"msg_code\": -1,\n    \"msg\": \"endpoint is disabled\"\n}\n",
          "time" : {
            "start" : 1747444219763,
            "stop" : 1747444219763,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : false
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 2,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 7,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "Assert status code: 201 == Response status code: 400",
      "time" : {
        "start" : 1747444219763,
        "stop" : 1747444219763,
        "duration" : 0
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: Incorrect status code: 400\n",
      "statusTrace" : "  File \"/home/runner/work/Oblache/Oblache/tests_api/utils/checking.py\", line 16, in check_status_code\n    assert status_code == result.status_code, f'Incorrect status code: {result.status_code}'\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 9,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "suite",
    "value" : "POST"
  }, {
    "name" : "parentSuite",
    "value" : "tests_api"
  }, {
    "name" : "subSuite",
    "value" : "TestPOST"
  }, {
    "name" : "host",
    "value" : "pkrvmf6wy0o8zjz"
  }, {
    "name" : "thread",
    "value" : "2635-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests_api.test_bd"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 154,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 36,
        "unknown" : 0,
        "total" : 190
      },
      "items" : [ {
        "uid" : "d8951419c6c0c87",
        "reportUrl" : "https://lambotik.github.io/Oblache/404//#testresult/d8951419c6c0c87",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 400",
        "time" : {
          "start" : 1747357920098,
          "stop" : 1747357920417,
          "duration" : 319
        }
      }, {
        "uid" : "2a0fc0687410a451",
        "reportUrl" : "https://lambotik.github.io/Oblache/403//#testresult/2a0fc0687410a451",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 400",
        "time" : {
          "start" : 1747271314685,
          "stop" : 1747271314999,
          "duration" : 314
        }
      }, {
        "uid" : "dc881a1f7c6deea3",
        "reportUrl" : "https://lambotik.github.io/Oblache/402//#testresult/dc881a1f7c6deea3",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 400",
        "time" : {
          "start" : 1747185058998,
          "stop" : 1747185059498,
          "duration" : 500
        }
      }, {
        "uid" : "3a63de1c7b59b799",
        "reportUrl" : "https://lambotik.github.io/Oblache/401//#testresult/3a63de1c7b59b799",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 400",
        "time" : {
          "start" : 1747098727110,
          "stop" : 1747098727479,
          "duration" : 369
        }
      }, {
        "uid" : "854be7a88d2a9608",
        "reportUrl" : "https://lambotik.github.io/Oblache/400//#testresult/854be7a88d2a9608",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 400",
        "time" : {
          "start" : 1747012430994,
          "stop" : 1747012431409,
          "duration" : 415
        }
      }, {
        "uid" : "94ad3caebc65ec2a",
        "reportUrl" : "https://lambotik.github.io/Oblache/399//#testresult/94ad3caebc65ec2a",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 400",
        "time" : {
          "start" : 1746926130676,
          "stop" : 1746926131177,
          "duration" : 501
        }
      }, {
        "uid" : "67307a44c94bea2a",
        "reportUrl" : "https://lambotik.github.io/Oblache/398//#testresult/67307a44c94bea2a",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 400",
        "time" : {
          "start" : 1746839288713,
          "stop" : 1746839289016,
          "duration" : 303
        }
      }, {
        "uid" : "8cc520d9e4206cf8",
        "reportUrl" : "https://lambotik.github.io/Oblache/397//#testresult/8cc520d9e4206cf8",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 400",
        "time" : {
          "start" : 1746753042149,
          "stop" : 1746753042461,
          "duration" : 312
        }
      }, {
        "uid" : "90cc4524fd15db9a",
        "reportUrl" : "https://lambotik.github.io/Oblache/396//#testresult/90cc4524fd15db9a",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 400",
        "time" : {
          "start" : 1746666695578,
          "stop" : 1746666696076,
          "duration" : 498
        }
      }, {
        "uid" : "2afe886abbb7356d",
        "reportUrl" : "https://lambotik.github.io/Oblache/395//#testresult/2afe886abbb7356d",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 400",
        "time" : {
          "start" : 1746580265562,
          "stop" : 1746580266081,
          "duration" : 519
        }
      }, {
        "uid" : "a4a588f77691909e",
        "reportUrl" : "https://lambotik.github.io/Oblache/394//#testresult/a4a588f77691909e",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 400",
        "time" : {
          "start" : 1746493833560,
          "stop" : 1746493833876,
          "duration" : 316
        }
      }, {
        "uid" : "177cbbc5f8be051",
        "reportUrl" : "https://lambotik.github.io/Oblache/393//#testresult/177cbbc5f8be051",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 400",
        "time" : {
          "start" : 1746407588032,
          "stop" : 1746407588403,
          "duration" : 371
        }
      }, {
        "uid" : "51946081266390fa",
        "reportUrl" : "https://lambotik.github.io/Oblache/389//#testresult/51946081266390fa",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 400",
        "time" : {
          "start" : 1746062151097,
          "stop" : 1746062151413,
          "duration" : 316
        }
      }, {
        "uid" : "f582763f7eeee1fd",
        "reportUrl" : "https://lambotik.github.io/Oblache/388//#testresult/f582763f7eeee1fd",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 400",
        "time" : {
          "start" : 1745975384232,
          "stop" : 1745975384547,
          "duration" : 315
        }
      }, {
        "uid" : "e4bb4ce147d1aac7",
        "reportUrl" : "https://lambotik.github.io/Oblache/387//#testresult/e4bb4ce147d1aac7",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 400",
        "time" : {
          "start" : 1745888960623,
          "stop" : 1745888960982,
          "duration" : 359
        }
      }, {
        "uid" : "2dc943a59fbf9d99",
        "reportUrl" : "https://lambotik.github.io/Oblache/386//#testresult/2dc943a59fbf9d99",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 400",
        "time" : {
          "start" : 1745802690382,
          "stop" : 1745802690907,
          "duration" : 525
        }
      }, {
        "uid" : "ff4b6f694eace838",
        "reportUrl" : "https://lambotik.github.io/Oblache/385//#testresult/ff4b6f694eace838",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 400",
        "time" : {
          "start" : 1745716414097,
          "stop" : 1745716414607,
          "duration" : 510
        }
      }, {
        "uid" : "3de642e196e36d82",
        "reportUrl" : "https://lambotik.github.io/Oblache/384//#testresult/3de642e196e36d82",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 400",
        "time" : {
          "start" : 1745629608177,
          "stop" : 1745629608573,
          "duration" : 396
        }
      }, {
        "uid" : "ef182ead40165507",
        "reportUrl" : "https://lambotik.github.io/Oblache/383//#testresult/ef182ead40165507",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 400",
        "time" : {
          "start" : 1745543364272,
          "stop" : 1745543364794,
          "duration" : 522
        }
      }, {
        "uid" : "7217fcff3196e78c",
        "reportUrl" : "https://lambotik.github.io/Oblache/382//#testresult/7217fcff3196e78c",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 400",
        "time" : {
          "start" : 1745456953967,
          "stop" : 1745456954348,
          "duration" : 381
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "8452384b38c58448.json",
  "parameterValues" : [ ]
}