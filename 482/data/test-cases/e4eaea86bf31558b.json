{
  "uid" : "e4eaea86bf31558b",
  "name" : "POST checking ports_len negative range",
  "fullName" : "tests_api.test_bd.TestPOST#test_post_checking_ports_len_negative_range",
  "historyId" : "6a5e2b3a0040caf8e74db064b01d1684",
  "time" : {
    "start" : 1756086963228,
    "stop" : 1756086963606,
    "duration" : 378
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: Result is not equal expected value",
  "statusTrace" : "self = <tests_api.test_bd.TestPOST object at 0x7fe96b2983e0>\n\n    @allure.title('POST checking ports_len negative range')\n    def test_post_checking_ports_len_negative_range(self):\n        result = API.post_create_docker_container_checking_ports(\n            token=TestPOST.token,\n            port_len=\"80-90\")\n        Checking.check_status_code(result, 400)\n>       Checking.check_json_value(result, 'msg', 'msg[]: ports range is too wide')\n\ntests_api/test_bd.py:383: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [400]>, field_name = 'msg'\nexpected_value = 'msg[]: ports range is too wide'\n\n    @staticmethod\n    def check_json_value(response: requests.models.Response, field_name: str, expected_value):\n        \"\"\"\n        :param response: requests.models.Response\n        :param field_name:\n        :param expected_value:\n        \"\"\"\n        check = response.json()\n        check_info = check.get(field_name)\n        with allure.step(\n                f'Compare result request with expected value:'\n                f'\\nResponse: {response}\\nField name: {field_name}\\nValue: {expected_value}'):\n>           assert check_info == expected_value, 'Result is not equal expected value'\nE           AssertionError: Result is not equal expected value\n\ntests_api/utils/checking.py:57: AssertionError",
  "flaky" : true,
  "newFailed" : true,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: Result is not equal expected value",
    "statusTrace" : "self = <tests_api.test_bd.TestPOST object at 0x7fe96b2983e0>\n\n    @allure.title('POST checking ports_len negative range')\n    def test_post_checking_ports_len_negative_range(self):\n        result = API.post_create_docker_container_checking_ports(\n            token=TestPOST.token,\n            port_len=\"80-90\")\n        Checking.check_status_code(result, 400)\n>       Checking.check_json_value(result, 'msg', 'msg[]: ports range is too wide')\n\ntests_api/test_bd.py:383: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [400]>, field_name = 'msg'\nexpected_value = 'msg[]: ports range is too wide'\n\n    @staticmethod\n    def check_json_value(response: requests.models.Response, field_name: str, expected_value):\n        \"\"\"\n        :param response: requests.models.Response\n        :param field_name:\n        :param expected_value:\n        \"\"\"\n        check = response.json()\n        check_info = check.get(field_name)\n        with allure.step(\n                f'Compare result request with expected value:'\n                f'\\nResponse: {response}\\nField name: {field_name}\\nValue: {expected_value}'):\n>           assert check_info == expected_value, 'Result is not equal expected value'\nE           AssertionError: Result is not equal expected value\n\ntests_api/utils/checking.py:57: AssertionError",
    "steps" : [ {
      "name" : "post_create_docker_container",
      "time" : {
        "start" : 1756086963228,
        "stop" : 1756086963605,
        "duration" : 377
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "Endpoint: /container_create",
        "time" : {
          "start" : 1756086963605,
          "stop" : 1756086963605,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      }, {
        "name" : "Request:",
        "time" : {
          "start" : 1756086963605,
          "stop" : 1756086963605,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "Headers: {'Content-Type': 'application/json', 'Authorization': {'93959b33-05ab-441c-aa0a-3cb7814d64ed'}}",
          "time" : {
            "start" : 1756086963605,
            "stop" : 1756086963605,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : false
        }, {
          "name" : "Body: {\"docker_image\": \"nginx\", \"int_ports\": f\"80-90\", \"env\": 3, \"region\": 3}",
          "time" : {
            "start" : 1756086963605,
            "stop" : 1756086963605,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : false
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 2,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : true
      }, {
        "name" : "Response:",
        "time" : {
          "start" : 1756086963605,
          "stop" : 1756086963605,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "Status code: 400",
          "time" : {
            "start" : 1756086963605,
            "stop" : 1756086963605,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : false
        }, {
          "name" : "JSON: {\n    \"msg_code\": 52,\n    \"msg\": \"endpoint is disabled\"\n}\n",
          "time" : {
            "start" : 1756086963605,
            "stop" : 1756086963605,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : false
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 2,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 7,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "Assert status code: 400 == Response status code: 400",
      "time" : {
        "start" : 1756086963605,
        "stop" : 1756086963605,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Compare result request with expected value:\nResponse: <Response [400]>\nField name: msg\nValue: msg[]: ports range is too wide",
      "time" : {
        "start" : 1756086963605,
        "stop" : 1756086963605,
        "duration" : 0
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: Result is not equal expected value\n",
      "statusTrace" : "  File \"/home/runner/work/Oblache/Oblache/tests_api/utils/checking.py\", line 57, in check_json_value\n    assert check_info == expected_value, 'Result is not equal expected value'\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 10,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "suite",
    "value" : "POST"
  }, {
    "name" : "parentSuite",
    "value" : "tests_api"
  }, {
    "name" : "subSuite",
    "value" : "TestPOST"
  }, {
    "name" : "host",
    "value" : "pkrvmqc4gcfdwos"
  }, {
    "name" : "thread",
    "value" : "2576-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests_api.test_bd"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 207,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 60,
        "unknown" : 0,
        "total" : 267
      },
      "items" : [ {
        "uid" : "58bcf5121aae0848",
        "reportUrl" : "https://lambotik.github.io/Oblache/481//#testresult/58bcf5121aae0848",
        "status" : "passed",
        "time" : {
          "start" : 1756000928070,
          "stop" : 1756000928562,
          "duration" : 492
        }
      }, {
        "uid" : "b34b81b2bb04ad9b",
        "reportUrl" : "https://lambotik.github.io/Oblache/480//#testresult/b34b81b2bb04ad9b",
        "status" : "passed",
        "time" : {
          "start" : 1755913632084,
          "stop" : 1755913632394,
          "duration" : 310
        }
      }, {
        "uid" : "7e667e0a5608dbed",
        "reportUrl" : "https://lambotik.github.io/Oblache/479//#testresult/7e667e0a5608dbed",
        "status" : "passed",
        "time" : {
          "start" : 1755827472069,
          "stop" : 1755827472391,
          "duration" : 322
        }
      }, {
        "uid" : "5e21eb55610a55ce",
        "reportUrl" : "https://lambotik.github.io/Oblache/478//#testresult/5e21eb55610a55ce",
        "status" : "passed",
        "time" : {
          "start" : 1755741018805,
          "stop" : 1755741019167,
          "duration" : 362
        }
      }, {
        "uid" : "50e79abd1795270f",
        "reportUrl" : "https://lambotik.github.io/Oblache/477//#testresult/50e79abd1795270f",
        "status" : "passed",
        "time" : {
          "start" : 1755654709556,
          "stop" : 1755654709863,
          "duration" : 307
        }
      }, {
        "uid" : "8051c0b809a90e35",
        "reportUrl" : "https://lambotik.github.io/Oblache/476//#testresult/8051c0b809a90e35",
        "status" : "passed",
        "time" : {
          "start" : 1755568428966,
          "stop" : 1755568429272,
          "duration" : 306
        }
      }, {
        "uid" : "fce06441111f3d67",
        "reportUrl" : "https://lambotik.github.io/Oblache/475//#testresult/fce06441111f3d67",
        "status" : "passed",
        "time" : {
          "start" : 1755482788932,
          "stop" : 1755482789291,
          "duration" : 359
        }
      }, {
        "uid" : "13d8afd95c34a3f7",
        "reportUrl" : "https://lambotik.github.io/Oblache/474//#testresult/13d8afd95c34a3f7",
        "status" : "passed",
        "time" : {
          "start" : 1755396374195,
          "stop" : 1755396374704,
          "duration" : 509
        }
      }, {
        "uid" : "5033344a77c0904e",
        "reportUrl" : "https://lambotik.github.io/Oblache/473//#testresult/5033344a77c0904e",
        "status" : "passed",
        "time" : {
          "start" : 1755309276805,
          "stop" : 1755309277317,
          "duration" : 512
        }
      }, {
        "uid" : "cabae26d4a318ce3",
        "reportUrl" : "https://lambotik.github.io/Oblache/472//#testresult/cabae26d4a318ce3",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 502",
        "time" : {
          "start" : 1755223209912,
          "stop" : 1755223210207,
          "duration" : 295
        }
      }, {
        "uid" : "c7d99b36ceb67382",
        "reportUrl" : "https://lambotik.github.io/Oblache/471//#testresult/c7d99b36ceb67382",
        "status" : "passed",
        "time" : {
          "start" : 1755136777154,
          "stop" : 1755136777534,
          "duration" : 380
        }
      }, {
        "uid" : "e6e629b1c12b21a2",
        "reportUrl" : "https://lambotik.github.io/Oblache/470//#testresult/e6e629b1c12b21a2",
        "status" : "passed",
        "time" : {
          "start" : 1755050348092,
          "stop" : 1755050348443,
          "duration" : 351
        }
      }, {
        "uid" : "51d144dab45f0b01",
        "reportUrl" : "https://lambotik.github.io/Oblache/469//#testresult/51d144dab45f0b01",
        "status" : "passed",
        "time" : {
          "start" : 1754963822709,
          "stop" : 1754963823015,
          "duration" : 306
        }
      }, {
        "uid" : "702a325164a098f",
        "reportUrl" : "https://lambotik.github.io/Oblache/468//#testresult/702a325164a098f",
        "status" : "passed",
        "time" : {
          "start" : 1754878168409,
          "stop" : 1754878168901,
          "duration" : 492
        }
      }, {
        "uid" : "d5f1bc311a790bef",
        "reportUrl" : "https://lambotik.github.io/Oblache/467//#testresult/d5f1bc311a790bef",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 502",
        "time" : {
          "start" : 1754791986559,
          "stop" : 1754791987026,
          "duration" : 467
        }
      }, {
        "uid" : "27f34f050d8cc670",
        "reportUrl" : "https://lambotik.github.io/Oblache/466//#testresult/27f34f050d8cc670",
        "status" : "passed",
        "time" : {
          "start" : 1754704682221,
          "stop" : 1754704682536,
          "duration" : 315
        }
      }, {
        "uid" : "4e370a699dbb298a",
        "reportUrl" : "https://lambotik.github.io/Oblache/465//#testresult/4e370a699dbb298a",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 502",
        "time" : {
          "start" : 1754618945115,
          "stop" : 1754618945596,
          "duration" : 481
        }
      }, {
        "uid" : "2ccde9411f222c9c",
        "reportUrl" : "https://lambotik.github.io/Oblache/464//#testresult/2ccde9411f222c9c",
        "status" : "passed",
        "time" : {
          "start" : 1754532581640,
          "stop" : 1754532582140,
          "duration" : 500
        }
      }, {
        "uid" : "cd838a7d60d66511",
        "reportUrl" : "https://lambotik.github.io/Oblache/463//#testresult/cd838a7d60d66511",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 502",
        "time" : {
          "start" : 1754446160636,
          "stop" : 1754446161131,
          "duration" : 495
        }
      }, {
        "uid" : "8141a02929255d6",
        "reportUrl" : "https://lambotik.github.io/Oblache/462//#testresult/8141a02929255d6",
        "status" : "passed",
        "time" : {
          "start" : 1754359855803,
          "stop" : 1754359856152,
          "duration" : 349
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "e4eaea86bf31558b.json",
  "parameterValues" : [ ]
}