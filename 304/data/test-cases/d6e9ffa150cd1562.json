{
  "uid" : "d6e9ffa150cd1562",
  "name" : "Capacity_db",
  "fullName" : "tests_api.test_bd.TestFull#test_capacity_db",
  "historyId" : "936f7fa0df691d843e1d921c6b4b86e7",
  "time" : {
    "start" : 1738717516892,
    "stop" : 1738717577239,
    "duration" : 60347
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [504]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/requests/models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/json/decoder.py:338: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f93556ff710>\ns = '<html>\\r\\n<head><title>504 Gateway Time-out</title></head>\\r\\n<body>\\r\\n<center><h1>504 Gateway Time-out</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/json/decoder.py:356: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests_api.test_bd.TestFull object at 0x7f935454bbf0>\n\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.title('Capacity_db')\n    def test_capacity_db(self):\n>       start_mb_value = API.get_profile(TestFull.token).json()['data'][\"content\"][4][1]\n\ntests_api/test_bd.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [504]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/requests/models.py:978: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [504]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/requests/models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/json/decoder.py:338: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f93556ff710>\ns = '<html>\\r\\n<head><title>504 Gateway Time-out</title></head>\\r\\n<body>\\r\\n<center><h1>504 Gateway Time-out</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/json/decoder.py:356: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests_api.test_bd.TestFull object at 0x7f935454bbf0>\n\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.title('Capacity_db')\n    def test_capacity_db(self):\n>       start_mb_value = API.get_profile(TestFull.token).json()['data'][\"content\"][4][1]\n\ntests_api/test_bd.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [504]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/requests/models.py:978: JSONDecodeError",
    "steps" : [ {
      "name" : "Endpoint: /get_profile",
      "time" : {
        "start" : 1738717577238,
        "stop" : 1738717577238,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Request:",
      "time" : {
        "start" : 1738717577238,
        "stop" : 1738717577239,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "Url: https://dbend.areso.pro/get_profile",
        "time" : {
          "start" : 1738717577238,
          "stop" : 1738717577238,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      }, {
        "name" : "Headers: {'Content-Type': 'application/json', 'Authorization': 'None'}",
        "time" : {
          "start" : 1738717577238,
          "stop" : 1738717577239,
          "duration" : 1
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      }, {
        "name" : "Body: None",
        "time" : {
          "start" : 1738717577239,
          "stop" : 1738717577239,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 3,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "Response:",
      "time" : {
        "start" : 1738717577239,
        "stop" : 1738717577239,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "Status code: 504",
        "time" : {
          "start" : 1738717577239,
          "stop" : 1738717577239,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      }, {
        "name" : "JSON: <html>\r\n<head><title>504 Gateway Time-out</title></head>\r\n<body>\r\n<center><h1>504 Gateway Time-out</h1></center>\r\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\r\n</body>\r\n</html>\r\n",
        "time" : {
          "start" : 1738717577239,
          "stop" : 1738717577239,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 2,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 8,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "severity",
    "value" : "critical"
  }, {
    "name" : "suite",
    "value" : "Test Connection DB"
  }, {
    "name" : "epic",
    "value" : "Connection DB"
  }, {
    "name" : "parentSuite",
    "value" : "tests_api"
  }, {
    "name" : "subSuite",
    "value" : "TestFull"
  }, {
    "name" : "host",
    "value" : "fv-az1315-673"
  }, {
    "name" : "thread",
    "value" : "2475-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests_api.test_bd"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "critical",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 87,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 87
      },
      "items" : [ {
        "uid" : "1a5b618d7e0afd61",
        "reportUrl" : "https://lambotik.github.io/Oblache/303//#testresult/1a5b618d7e0afd61",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1738631072734,
          "stop" : 1738631133271,
          "duration" : 60537
        }
      }, {
        "uid" : "b087d73283861df4",
        "reportUrl" : "https://lambotik.github.io/Oblache/302//#testresult/b087d73283861df4",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1738544737120,
          "stop" : 1738544797465,
          "duration" : 60345
        }
      }, {
        "uid" : "7bbf8f20cccbf289",
        "reportUrl" : "https://lambotik.github.io/Oblache/301//#testresult/7bbf8f20cccbf289",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1738458458602,
          "stop" : 1738458518967,
          "duration" : 60365
        }
      }, {
        "uid" : "16e72ba5e01d3dee",
        "reportUrl" : "https://lambotik.github.io/Oblache/300//#testresult/16e72ba5e01d3dee",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1738371845773,
          "stop" : 1738371846259,
          "duration" : 486
        }
      }, {
        "uid" : "421186ae037861e5",
        "reportUrl" : "https://lambotik.github.io/Oblache/299//#testresult/421186ae037861e5",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1738350565032,
          "stop" : 1738350565396,
          "duration" : 364
        }
      }, {
        "uid" : "72715b8b80056a24",
        "reportUrl" : "https://lambotik.github.io/Oblache/298//#testresult/72715b8b80056a24",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1738198756130,
          "stop" : 1738198756413,
          "duration" : 283
        }
      }, {
        "uid" : "f6dd5bc9d777d6c5",
        "reportUrl" : "https://lambotik.github.io/Oblache/297//#testresult/f6dd5bc9d777d6c5",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1738112410090,
          "stop" : 1738112410493,
          "duration" : 403
        }
      }, {
        "uid" : "55dc7ca0d68bcd04",
        "reportUrl" : "https://lambotik.github.io/Oblache/296//#testresult/55dc7ca0d68bcd04",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1738026022129,
          "stop" : 1738026022434,
          "duration" : 305
        }
      }, {
        "uid" : "aa578ed2c1e1bf1a",
        "reportUrl" : "https://lambotik.github.io/Oblache/295//#testresult/aa578ed2c1e1bf1a",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1737939698565,
          "stop" : 1737939699026,
          "duration" : 461
        }
      }, {
        "uid" : "931a61524c3ad476",
        "reportUrl" : "https://lambotik.github.io/Oblache/294//#testresult/931a61524c3ad476",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1737853341624,
          "stop" : 1737853342159,
          "duration" : 535
        }
      }, {
        "uid" : "4f1a2bc835f7ac95",
        "reportUrl" : "https://lambotik.github.io/Oblache/293//#testresult/4f1a2bc835f7ac95",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1737766639285,
          "stop" : 1737766639791,
          "duration" : 506
        }
      }, {
        "uid" : "438478ff48b146c",
        "reportUrl" : "https://lambotik.github.io/Oblache/292//#testresult/438478ff48b146c",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1737680474959,
          "stop" : 1737680475455,
          "duration" : 496
        }
      }, {
        "uid" : "e19d4bc19e644ea4",
        "reportUrl" : "https://lambotik.github.io/Oblache/291//#testresult/e19d4bc19e644ea4",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1737594015269,
          "stop" : 1737594015555,
          "duration" : 286
        }
      }, {
        "uid" : "87c8542118d9582d",
        "reportUrl" : "https://lambotik.github.io/Oblache/290//#testresult/87c8542118d9582d",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1737507699690,
          "stop" : 1737507699993,
          "duration" : 303
        }
      }, {
        "uid" : "3aa74611d7697e1d",
        "reportUrl" : "https://lambotik.github.io/Oblache/289//#testresult/3aa74611d7697e1d",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1737421182450,
          "stop" : 1737421182856,
          "duration" : 406
        }
      }, {
        "uid" : "293600974c1efe04",
        "reportUrl" : "https://lambotik.github.io/Oblache/288//#testresult/293600974c1efe04",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1737334871664,
          "stop" : 1737334872022,
          "duration" : 358
        }
      }, {
        "uid" : "642ba1b0042b7436",
        "reportUrl" : "https://lambotik.github.io/Oblache/287//#testresult/642ba1b0042b7436",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1737248696423,
          "stop" : 1737248696941,
          "duration" : 518
        }
      }, {
        "uid" : "a968547ee83305e2",
        "reportUrl" : "https://lambotik.github.io/Oblache/286//#testresult/a968547ee83305e2",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1737161893120,
          "stop" : 1737161893472,
          "duration" : 352
        }
      }, {
        "uid" : "3afac631051d5106",
        "reportUrl" : "https://lambotik.github.io/Oblache/285//#testresult/3afac631051d5106",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1737075587709,
          "stop" : 1737075588306,
          "duration" : 597
        }
      }, {
        "uid" : "f369d3713ff2852a",
        "reportUrl" : "https://lambotik.github.io/Oblache/284//#testresult/f369d3713ff2852a",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1736989196472,
          "stop" : 1736989196754,
          "duration" : 282
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "d6e9ffa150cd1562.json",
  "parameterValues" : [ ]
}