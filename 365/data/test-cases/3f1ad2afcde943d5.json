{
  "uid" : "3f1ad2afcde943d5",
  "name" : "Capacity_db",
  "fullName" : "tests_api.test_bd.TestFull#test_capacity_db",
  "historyId" : "936f7fa0df691d843e1d921c6b4b86e7",
  "time" : {
    "start" : 1743988139698,
    "stop" : 1743988140282,
    "duration" : 584
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/requests/models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/json/decoder.py:338: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f8b7a367110>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/json/decoder.py:356: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests_api.test_bd.TestFull object at 0x7f8b79126cc0>\n\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.title('Capacity_db')\n    def test_capacity_db(self):\n>       start_mb_value = API.get_profile(TestFull.token).json()['data'][\"content\"][4][1]\n\ntests_api/test_bd.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/requests/models.py:978: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/requests/models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/json/decoder.py:338: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f8b7a367110>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/json/decoder.py:356: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests_api.test_bd.TestFull object at 0x7f8b79126cc0>\n\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.title('Capacity_db')\n    def test_capacity_db(self):\n>       start_mb_value = API.get_profile(TestFull.token).json()['data'][\"content\"][4][1]\n\ntests_api/test_bd.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/requests/models.py:978: JSONDecodeError",
    "steps" : [ {
      "name" : "Endpoint: /get_profile",
      "time" : {
        "start" : 1743988140282,
        "stop" : 1743988140282,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Request:",
      "time" : {
        "start" : 1743988140282,
        "stop" : 1743988140282,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "Headers: {'Content-Type': 'application/json', 'Authorization': 'None'}",
        "time" : {
          "start" : 1743988140282,
          "stop" : 1743988140282,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      }, {
        "name" : "Body: None",
        "time" : {
          "start" : 1743988140282,
          "stop" : 1743988140282,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 2,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "Response:",
      "time" : {
        "start" : 1743988140282,
        "stop" : 1743988140282,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "Status code: 502",
        "time" : {
          "start" : 1743988140282,
          "stop" : 1743988140282,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      }, {
        "name" : "JSON: <html>\r\n<head><title>502 Bad Gateway</title></head>\r\n<body>\r\n<center><h1>502 Bad Gateway</h1></center>\r\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\r\n</body>\r\n</html>\r\n",
        "time" : {
          "start" : 1743988140282,
          "stop" : 1743988140282,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 2,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 7,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Connection DB"
  }, {
    "name" : "severity",
    "value" : "critical"
  }, {
    "name" : "suite",
    "value" : "Test Connection DB"
  }, {
    "name" : "parentSuite",
    "value" : "tests_api"
  }, {
    "name" : "subSuite",
    "value" : "TestFull"
  }, {
    "name" : "host",
    "value" : "fv-az1344-338"
  }, {
    "name" : "thread",
    "value" : "2500-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests_api.test_bd"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "critical",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 153,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 153
      },
      "items" : [ {
        "uid" : "16cbc519eb287746",
        "reportUrl" : "https://lambotik.github.io/Oblache/364//#testresult/16cbc519eb287746",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1743901857224,
          "stop" : 1743901857671,
          "duration" : 447
        }
      }, {
        "uid" : "8a52bbee1384d0ef",
        "reportUrl" : "https://lambotik.github.io/Oblache/363//#testresult/8a52bbee1384d0ef",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1743815128499,
          "stop" : 1743815128968,
          "duration" : 469
        }
      }, {
        "uid" : "87c1cf7933d724c6",
        "reportUrl" : "https://lambotik.github.io/Oblache/362//#testresult/87c1cf7933d724c6",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1743728779590,
          "stop" : 1743728780076,
          "duration" : 486
        }
      }, {
        "uid" : "40429289abf4c87e",
        "reportUrl" : "https://lambotik.github.io/Oblache/361//#testresult/40429289abf4c87e",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1743642398508,
          "stop" : 1743642398876,
          "duration" : 368
        }
      }, {
        "uid" : "22614010019f7246",
        "reportUrl" : "https://lambotik.github.io/Oblache/360//#testresult/22614010019f7246",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1743556054964,
          "stop" : 1743556055310,
          "duration" : 346
        }
      }, {
        "uid" : "65dba6765f569b65",
        "reportUrl" : "https://lambotik.github.io/Oblache/359//#testresult/65dba6765f569b65",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1743470090090,
          "stop" : 1743470090373,
          "duration" : 283
        }
      }, {
        "uid" : "42a7239dd5d512b3",
        "reportUrl" : "https://lambotik.github.io/Oblache/358//#testresult/42a7239dd5d512b3",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1743383418911,
          "stop" : 1743383419411,
          "duration" : 500
        }
      }, {
        "uid" : "e9ec0e62b416506e",
        "reportUrl" : "https://lambotik.github.io/Oblache/357//#testresult/e9ec0e62b416506e",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1743297091779,
          "stop" : 1743297092123,
          "duration" : 344
        }
      }, {
        "uid" : "9bf04859d99e5c27",
        "reportUrl" : "https://lambotik.github.io/Oblache/356//#testresult/9bf04859d99e5c27",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1743210315987,
          "stop" : 1743210316344,
          "duration" : 357
        }
      }, {
        "uid" : "50fecdae9a2f5496",
        "reportUrl" : "https://lambotik.github.io/Oblache/355//#testresult/50fecdae9a2f5496",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1743123949054,
          "stop" : 1743123949424,
          "duration" : 370
        }
      }, {
        "uid" : "d3d9c4f9e140cc75",
        "reportUrl" : "https://lambotik.github.io/Oblache/354//#testresult/d3d9c4f9e140cc75",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1743037556775,
          "stop" : 1743037557118,
          "duration" : 343
        }
      }, {
        "uid" : "71e82e24fcc70a99",
        "reportUrl" : "https://lambotik.github.io/Oblache/353//#testresult/71e82e24fcc70a99",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1742951167982,
          "stop" : 1742951168314,
          "duration" : 332
        }
      }, {
        "uid" : "6f0e6165486e14a4",
        "reportUrl" : "https://lambotik.github.io/Oblache/352//#testresult/6f0e6165486e14a4",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1742864782909,
          "stop" : 1742864783272,
          "duration" : 363
        }
      }, {
        "uid" : "e99295361db992a4",
        "reportUrl" : "https://lambotik.github.io/Oblache/351//#testresult/e99295361db992a4",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1742778476759,
          "stop" : 1742778477269,
          "duration" : 510
        }
      }, {
        "uid" : "5b11c7b21d159ac",
        "reportUrl" : "https://lambotik.github.io/Oblache/350//#testresult/5b11c7b21d159ac",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1742692229291,
          "stop" : 1742692229660,
          "duration" : 369
        }
      }, {
        "uid" : "1966750b07723de0",
        "reportUrl" : "https://lambotik.github.io/Oblache/349//#testresult/1966750b07723de0",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1742605468470,
          "stop" : 1742605468777,
          "duration" : 307
        }
      }, {
        "uid" : "7b548b71f4c8568d",
        "reportUrl" : "https://lambotik.github.io/Oblache/348//#testresult/7b548b71f4c8568d",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1742519158993,
          "stop" : 1742519159474,
          "duration" : 481
        }
      }, {
        "uid" : "40b68c8ce1242f15",
        "reportUrl" : "https://lambotik.github.io/Oblache/347//#testresult/40b68c8ce1242f15",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1742432668859,
          "stop" : 1742432669190,
          "duration" : 331
        }
      }, {
        "uid" : "7abe0f2f366f0dc9",
        "reportUrl" : "https://lambotik.github.io/Oblache/346//#testresult/7abe0f2f366f0dc9",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1742346358525,
          "stop" : 1742346358810,
          "duration" : 285
        }
      }, {
        "uid" : "98562bd037128172",
        "reportUrl" : "https://lambotik.github.io/Oblache/345//#testresult/98562bd037128172",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1742259906658,
          "stop" : 1742259907276,
          "duration" : 618
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "3f1ad2afcde943d5.json",
  "parameterValues" : [ ]
}