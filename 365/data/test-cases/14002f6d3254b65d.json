{
  "uid" : "14002f6d3254b65d",
  "name" : "POST get token and other params.",
  "fullName" : "tests_api.test_bd.TestStaticWebPages#test_get_token_and_body",
  "historyId" : "18cb579971f6ce414762f6adce716a56",
  "time" : {
    "start" : 1743988169019,
    "stop" : 1743988169019,
    "duration" : 0
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/requests/models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/json/decoder.py:338: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f8b7a367110>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/json/decoder.py:356: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\n    @pytest.fixture()\n    def get_token():\n        \"\"\"\n        Method return:\\n\n        token: str\\n\n        body: dict\\n\n        new_password: str\\n\n        old_password: str\\n\n        email: str\n        :returns: token: str, body: dict, new_password: str, old_password:str, email: str\n        \"\"\"\n        load_dotenv()\n        email = os.getenv('EMAIL')\n        old_password = os.getenv('PASSWORD')\n        new_password = '123456789'\n        try:\n            body = {\"email\": email, \"password\": f'{old_password}'}\n            result = requests.post('https://dbend.areso.pro/login', json=body)\n            token = result.json()['token']\n            if token != {}:\n                new_password, old_password = old_password, new_password\n            Checking.check_status_code(result, 200)\n            return token, body, new_password, old_password, email\n        except Exception as ex:\n            print(ex)\n            old_password, new_password = new_password, old_password\n            body = {\"email\": email, \"password\": f'{old_password}'}\n            result = requests.post('https://dbend.areso.pro/login', json=body)\n>           token = result.json()['token']\n\nconftest.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/requests/models.py:978: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "get_token",
    "time" : {
      "start" : 1743988169019,
      "stop" : 1743988169972,
      "duration" : 953
    },
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
    "statusTrace" : "  File \"/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/_pytest/fixtures.py\", line 1123, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/_pytest/fixtures.py\", line 902, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n                     ^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/Oblache/Oblache/conftest.py\", line 75, in get_token\n    token = result.json()['token']\n            ^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/requests/models.py\", line 978, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  } ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "suite",
    "value" : "Test Static webpages"
  }, {
    "name" : "parentSuite",
    "value" : "tests_api"
  }, {
    "name" : "subSuite",
    "value" : "TestStaticWebPages"
  }, {
    "name" : "host",
    "value" : "fv-az1344-338"
  }, {
    "name" : "thread",
    "value" : "2500-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests_api.test_bd"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 12,
        "skipped" : 0,
        "passed" : 141,
        "unknown" : 0,
        "total" : 153
      },
      "items" : [ {
        "uid" : "8d5c7fd193f918f9",
        "reportUrl" : "https://lambotik.github.io/Oblache/364//#testresult/8d5c7fd193f918f9",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1743901875765,
          "stop" : 1743901875765,
          "duration" : 0
        }
      }, {
        "uid" : "bea031dc8e53fab2",
        "reportUrl" : "https://lambotik.github.io/Oblache/363//#testresult/bea031dc8e53fab2",
        "status" : "passed",
        "time" : {
          "start" : 1743815261662,
          "stop" : 1743815261662,
          "duration" : 0
        }
      }, {
        "uid" : "5bd02e873544d170",
        "reportUrl" : "https://lambotik.github.io/Oblache/362//#testresult/5bd02e873544d170",
        "status" : "passed",
        "time" : {
          "start" : 1743728925211,
          "stop" : 1743728925212,
          "duration" : 1
        }
      }, {
        "uid" : "2960f0d508b25125",
        "reportUrl" : "https://lambotik.github.io/Oblache/361//#testresult/2960f0d508b25125",
        "status" : "passed",
        "time" : {
          "start" : 1743642524042,
          "stop" : 1743642524042,
          "duration" : 0
        }
      }, {
        "uid" : "720bbd89c13e173e",
        "reportUrl" : "https://lambotik.github.io/Oblache/360//#testresult/720bbd89c13e173e",
        "status" : "passed",
        "time" : {
          "start" : 1743556186388,
          "stop" : 1743556186388,
          "duration" : 0
        }
      }, {
        "uid" : "73c3e799d106a55f",
        "reportUrl" : "https://lambotik.github.io/Oblache/359//#testresult/73c3e799d106a55f",
        "status" : "passed",
        "time" : {
          "start" : 1743470204591,
          "stop" : 1743470204592,
          "duration" : 1
        }
      }, {
        "uid" : "f049b9b94d28164f",
        "reportUrl" : "https://lambotik.github.io/Oblache/358//#testresult/f049b9b94d28164f",
        "status" : "passed",
        "time" : {
          "start" : 1743383569099,
          "stop" : 1743383569099,
          "duration" : 0
        }
      }, {
        "uid" : "f645f0270be9cb3e",
        "reportUrl" : "https://lambotik.github.io/Oblache/357//#testresult/f645f0270be9cb3e",
        "status" : "passed",
        "time" : {
          "start" : 1743297223916,
          "stop" : 1743297223916,
          "duration" : 0
        }
      }, {
        "uid" : "8d4e50015848e122",
        "reportUrl" : "https://lambotik.github.io/Oblache/356//#testresult/8d4e50015848e122",
        "status" : "passed",
        "time" : {
          "start" : 1743210403344,
          "stop" : 1743210403344,
          "duration" : 0
        }
      }, {
        "uid" : "b0be9b5e1798ad9e",
        "reportUrl" : "https://lambotik.github.io/Oblache/355//#testresult/b0be9b5e1798ad9e",
        "status" : "passed",
        "time" : {
          "start" : 1743124063395,
          "stop" : 1743124063395,
          "duration" : 0
        }
      }, {
        "uid" : "3aaa7e90e9481a68",
        "reportUrl" : "https://lambotik.github.io/Oblache/354//#testresult/3aaa7e90e9481a68",
        "status" : "passed",
        "time" : {
          "start" : 1743037664906,
          "stop" : 1743037664907,
          "duration" : 1
        }
      }, {
        "uid" : "f0a11cf3303400e8",
        "reportUrl" : "https://lambotik.github.io/Oblache/353//#testresult/f0a11cf3303400e8",
        "status" : "passed",
        "time" : {
          "start" : 1742951260396,
          "stop" : 1742951260397,
          "duration" : 1
        }
      }, {
        "uid" : "5609edc39bcac92f",
        "reportUrl" : "https://lambotik.github.io/Oblache/352//#testresult/5609edc39bcac92f",
        "status" : "passed",
        "time" : {
          "start" : 1742864925722,
          "stop" : 1742864925722,
          "duration" : 0
        }
      }, {
        "uid" : "80097169bcd3f340",
        "reportUrl" : "https://lambotik.github.io/Oblache/351//#testresult/80097169bcd3f340",
        "status" : "passed",
        "time" : {
          "start" : 1742778585460,
          "stop" : 1742778585460,
          "duration" : 0
        }
      }, {
        "uid" : "e1a11f9bde5c4b54",
        "reportUrl" : "https://lambotik.github.io/Oblache/350//#testresult/e1a11f9bde5c4b54",
        "status" : "passed",
        "time" : {
          "start" : 1742692366123,
          "stop" : 1742692366123,
          "duration" : 0
        }
      }, {
        "uid" : "3fe00fdd905ed66b",
        "reportUrl" : "https://lambotik.github.io/Oblache/349//#testresult/3fe00fdd905ed66b",
        "status" : "passed",
        "time" : {
          "start" : 1742605600519,
          "stop" : 1742605600519,
          "duration" : 0
        }
      }, {
        "uid" : "fd7b047dc5711ed0",
        "reportUrl" : "https://lambotik.github.io/Oblache/348//#testresult/fd7b047dc5711ed0",
        "status" : "passed",
        "time" : {
          "start" : 1742519267849,
          "stop" : 1742519267849,
          "duration" : 0
        }
      }, {
        "uid" : "c8728a3fbcc88eb9",
        "reportUrl" : "https://lambotik.github.io/Oblache/347//#testresult/c8728a3fbcc88eb9",
        "status" : "passed",
        "time" : {
          "start" : 1742432806009,
          "stop" : 1742432806009,
          "duration" : 0
        }
      }, {
        "uid" : "89f4760efc0f8380",
        "reportUrl" : "https://lambotik.github.io/Oblache/346//#testresult/89f4760efc0f8380",
        "status" : "passed",
        "time" : {
          "start" : 1742346463327,
          "stop" : 1742346463327,
          "duration" : 0
        }
      }, {
        "uid" : "c422e64c8b9acb1c",
        "reportUrl" : "https://lambotik.github.io/Oblache/345//#testresult/c422e64c8b9acb1c",
        "status" : "passed",
        "time" : {
          "start" : 1742260009100,
          "stop" : 1742260009100,
          "duration" : 0
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "14002f6d3254b65d.json",
  "parameterValues" : [ ]
}