{
  "uid" : "db834640fc2d5e7",
  "name" : "test order db create backup",
  "fullName" : "tests_api.test_bd.TestBackup#test_order_db_create_backup",
  "historyId" : "bbc51bc9e59c2f7de52280f53d30e264",
  "time" : {
    "start" : 1726880408415,
    "stop" : 1726880408787,
    "duration" : 372
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: Incorrect status code: 400",
  "statusTrace" : "self = <tests_api.test_bd.TestBackup object at 0x7fd641be5cd0>\nget_token_backup_2 = ('8e1fc7bf-5766-4376-9114-b69e0264b9e9', {'email': '', 'password': ''}, '')\n\n    @allure.title('test order db create backup')\n    def test_order_db_create_backup(self, get_token_backup_2):\n        token, body, uuid = get_token_backup_2\n        response = API.post_db_backup_create(token=token, db_uuid=uuid)\n>       Checking.check_status_code(response, 200)\n\ntests_api/test_bd.py:448: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresult = <Response [400]>, status_code = 200\n\n    @staticmethod\n    def check_status_code(result: requests.models.Response, status_code: int):\n        \"\"\"\n        Method check status code\n        :param result: Response\n        :param status_code:\n        \"\"\"\n        with allure.step(f'Assert status code: {status_code} == Response status code: {result.status_code}'):\n>           assert status_code == result.status_code, f'Incorrect status code: {result.status_code}'\nE           AssertionError: Incorrect status code: 400\n\ntests_api/utils/checking.py:16: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "get_token_backup_2",
    "time" : {
      "start" : 1726880408050,
      "stop" : 1726880408414,
      "duration" : 364
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Assert status code: 200 == Response status code: 200",
      "time" : {
        "start" : 1726880408414,
        "stop" : 1726880408414,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false,
      "stepsCount" : 0
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true,
    "stepsCount" : 1
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: Incorrect status code: 400",
    "statusTrace" : "self = <tests_api.test_bd.TestBackup object at 0x7fd641be5cd0>\nget_token_backup_2 = ('8e1fc7bf-5766-4376-9114-b69e0264b9e9', {'email': '', 'password': ''}, '')\n\n    @allure.title('test order db create backup')\n    def test_order_db_create_backup(self, get_token_backup_2):\n        token, body, uuid = get_token_backup_2\n        response = API.post_db_backup_create(token=token, db_uuid=uuid)\n>       Checking.check_status_code(response, 200)\n\ntests_api/test_bd.py:448: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresult = <Response [400]>, status_code = 200\n\n    @staticmethod\n    def check_status_code(result: requests.models.Response, status_code: int):\n        \"\"\"\n        Method check status code\n        :param result: Response\n        :param status_code:\n        \"\"\"\n        with allure.step(f'Assert status code: {status_code} == Response status code: {result.status_code}'):\n>           assert status_code == result.status_code, f'Incorrect status code: {result.status_code}'\nE           AssertionError: Incorrect status code: 400\n\ntests_api/utils/checking.py:16: AssertionError",
    "steps" : [ {
      "name" : "Endpoint: /db_backup_create",
      "time" : {
        "start" : 1726880408786,
        "stop" : 1726880408786,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false,
      "stepsCount" : 0
    }, {
      "name" : "Request:",
      "time" : {
        "start" : 1726880408786,
        "stop" : 1726880408786,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "Url: https://dbend.areso.pro/db_backup_create",
        "time" : {
          "start" : 1726880408786,
          "stop" : 1726880408786,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false,
        "stepsCount" : 0
      }, {
        "name" : "Headers: {'Content-Type': 'application/json', 'Authorization': '8e1fc7bf-5766-4376-9114-b69e0264b9e9'}",
        "time" : {
          "start" : 1726880408786,
          "stop" : 1726880408786,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false,
        "stepsCount" : 0
      }, {
        "name" : "Body: {\"email\": email, \"password\": password}",
        "time" : {
          "start" : 1726880408786,
          "stop" : 1726880408786,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false,
        "stepsCount" : 0
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true,
      "stepsCount" : 3
    }, {
      "name" : "Response:",
      "time" : {
        "start" : 1726880408786,
        "stop" : 1726880408787,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "Status code: 400",
        "time" : {
          "start" : 1726880408786,
          "stop" : 1726880408786,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false,
        "stepsCount" : 0
      }, {
        "name" : "JSON: {\n    \"content\": \"db either not exist, not in good shape or not belong to the user\"\n}\n",
        "time" : {
          "start" : 1726880408786,
          "stop" : 1726880408786,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false,
        "stepsCount" : 0
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true,
      "stepsCount" : 2
    }, {
      "name" : "Assert status code: 200 == Response status code: 400",
      "time" : {
        "start" : 1726880408787,
        "stop" : 1726880408787,
        "duration" : 0
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: Incorrect status code: 400\n",
      "statusTrace" : "  File \"/home/runner/work/Oblache/Oblache/tests_api/utils/checking.py\", line 16, in check_status_code\n    assert status_code == result.status_code, f'Incorrect status code: {result.status_code}'\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true,
      "stepsCount" : 0
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true,
    "stepsCount" : 9
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "suite",
    "value" : "Test Backup"
  }, {
    "name" : "parentSuite",
    "value" : "tests_api"
  }, {
    "name" : "subSuite",
    "value" : "TestBackup"
  }, {
    "name" : "host",
    "value" : "fv-az692-270"
  }, {
    "name" : "thread",
    "value" : "2267-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests_api.test_bd"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 2,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 2
      },
      "items" : [ {
        "uid" : "b2b41aa396eb1e27",
        "reportUrl" : "https://lambotik.github.io/Oblache/166//#testresult/b2b41aa396eb1e27",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 400",
        "time" : {
          "start" : 1726794071188,
          "stop" : 1726794071695,
          "duration" : 507
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "db834640fc2d5e7.json",
  "parameterValues" : [ ]
}