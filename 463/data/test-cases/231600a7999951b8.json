{
  "uid" : "231600a7999951b8",
  "name" : "POST delete_container",
  "fullName" : "tests_api.test_bd.TestPOST#test_delete_container",
  "historyId" : "f292c4cfa0c4b2dd77724aada1d3db8c",
  "time" : {
    "start" : 1754446163090,
    "stop" : 1754446163571,
    "duration" : 481
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/requests/models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:338: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fc3222da960>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:356: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests_api.test_bd.TestPOST object at 0x7fc320e32900>\n\n    @allure.title('POST delete_container')\n    def test_delete_container(self):\n>       result = API.post_delete_docker_container(\n            token=TestPOST.token,\n            list_index=-1)\n\ntests_api/test_bd.py:415: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests_api/utils/request.py:765: in post_delete_docker_container\n    docker_uuid = list(result_list.json()['data'])[list_index]\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/requests/models.py:978: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/requests/models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:338: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fc3222da960>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:356: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests_api.test_bd.TestPOST object at 0x7fc320e32900>\n\n    @allure.title('POST delete_container')\n    def test_delete_container(self):\n>       result = API.post_delete_docker_container(\n            token=TestPOST.token,\n            list_index=-1)\n\ntests_api/test_bd.py:415: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests_api/utils/request.py:765: in post_delete_docker_container\n    docker_uuid = list(result_list.json()['data'])[list_index]\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/requests/models.py:978: JSONDecodeError",
    "steps" : [ {
      "name" : "post_delete_docker_container",
      "time" : {
        "start" : 1754446163090,
        "stop" : 1754446163571,
        "duration" : 481
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
      "statusTrace" : "  File \"/home/runner/work/Oblache/Oblache/tests_api/utils/request.py\", line 765, in post_delete_docker_container\n    docker_uuid = list(result_list.json()['data'])[list_index]\n                       ^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/requests/models.py\", line 978, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ {
        "name" : "post_container_list",
        "time" : {
          "start" : 1754446163090,
          "stop" : 1754446163571,
          "duration" : 481
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "Endpoint: /container_list",
          "time" : {
            "start" : 1754446163570,
            "stop" : 1754446163570,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ ],
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : false,
          "stepsCount" : 0
        }, {
          "name" : "Request:",
          "time" : {
            "start" : 1754446163571,
            "stop" : 1754446163571,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ {
            "name" : "Headers: {'Content-Type': 'application/json', 'Authorization': {None}}",
            "time" : {
              "start" : 1754446163571,
              "stop" : 1754446163571,
              "duration" : 0
            },
            "status" : "passed",
            "steps" : [ ],
            "attachments" : [ ],
            "parameters" : [ ],
            "attachmentsCount" : 0,
            "shouldDisplayMessage" : false,
            "hasContent" : false,
            "stepsCount" : 0
          }, {
            "name" : "Body: None",
            "time" : {
              "start" : 1754446163571,
              "stop" : 1754446163571,
              "duration" : 0
            },
            "status" : "passed",
            "steps" : [ ],
            "attachments" : [ ],
            "parameters" : [ ],
            "attachmentsCount" : 0,
            "shouldDisplayMessage" : false,
            "hasContent" : false,
            "stepsCount" : 0
          } ],
          "attachments" : [ ],
          "parameters" : [ ],
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : true,
          "stepsCount" : 2
        }, {
          "name" : "Response:",
          "time" : {
            "start" : 1754446163571,
            "stop" : 1754446163571,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ {
            "name" : "Status code: 502",
            "time" : {
              "start" : 1754446163571,
              "stop" : 1754446163571,
              "duration" : 0
            },
            "status" : "passed",
            "steps" : [ ],
            "attachments" : [ ],
            "parameters" : [ ],
            "attachmentsCount" : 0,
            "shouldDisplayMessage" : false,
            "hasContent" : false,
            "stepsCount" : 0
          }, {
            "name" : "JSON: <html>\r\n<head><title>502 Bad Gateway</title></head>\r\n<body>\r\n<center><h1>502 Bad Gateway</h1></center>\r\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\r\n</body>\r\n</html>\r\n",
            "time" : {
              "start" : 1754446163571,
              "stop" : 1754446163571,
              "duration" : 0
            },
            "status" : "passed",
            "steps" : [ ],
            "attachments" : [ ],
            "parameters" : [ ],
            "attachmentsCount" : 0,
            "shouldDisplayMessage" : false,
            "hasContent" : false,
            "stepsCount" : 0
          } ],
          "attachments" : [ ],
          "parameters" : [ ],
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : true,
          "stepsCount" : 2
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : true,
        "stepsCount" : 7
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true,
      "stepsCount" : 8
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true,
    "stepsCount" : 9
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "suite",
    "value" : "POST"
  }, {
    "name" : "parentSuite",
    "value" : "tests_api"
  }, {
    "name" : "subSuite",
    "value" : "TestPOST"
  }, {
    "name" : "host",
    "value" : "pkrvmjbmru5nbw0"
  }, {
    "name" : "thread",
    "value" : "2583-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests_api.test_bd"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 222,
        "broken" : 23,
        "skipped" : 0,
        "passed" : 3,
        "unknown" : 0,
        "total" : 248
      },
      "items" : [ {
        "uid" : "d61b3e08beb8e54a",
        "reportUrl" : "https://lambotik.github.io/Oblache/462//#testresult/d61b3e08beb8e54a",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 400",
        "time" : {
          "start" : 1754359857964,
          "stop" : 1754359879022,
          "duration" : 21058
        }
      }, {
        "uid" : "1c1b41a2c41f40a8",
        "reportUrl" : "https://lambotik.github.io/Oblache/461//#testresult/1c1b41a2c41f40a8",
        "status" : "passed",
        "time" : {
          "start" : 1754274192829,
          "stop" : 1754274213974,
          "duration" : 21145
        }
      }, {
        "uid" : "193bb03c7ea7e0ce",
        "reportUrl" : "https://lambotik.github.io/Oblache/460//#testresult/193bb03c7ea7e0ce",
        "status" : "passed",
        "time" : {
          "start" : 1754187820402,
          "stop" : 1754187841988,
          "duration" : 21586
        }
      }, {
        "uid" : "a9f3be48d45456eb",
        "reportUrl" : "https://lambotik.github.io/Oblache/459//#testresult/a9f3be48d45456eb",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 400",
        "time" : {
          "start" : 1754100160610,
          "stop" : 1754100181668,
          "duration" : 21058
        }
      }, {
        "uid" : "46704c142fd6cfaf",
        "reportUrl" : "https://lambotik.github.io/Oblache/458//#testresult/46704c142fd6cfaf",
        "status" : "passed",
        "time" : {
          "start" : 1754015090854,
          "stop" : 1754015111802,
          "duration" : 20948
        }
      }, {
        "uid" : "d500751101424176",
        "reportUrl" : "https://lambotik.github.io/Oblache/457//#testresult/d500751101424176",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 400",
        "time" : {
          "start" : 1753927682638,
          "stop" : 1753927703842,
          "duration" : 21204
        }
      }, {
        "uid" : "1619e0dde6146081",
        "reportUrl" : "https://lambotik.github.io/Oblache/456//#testresult/1619e0dde6146081",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 400",
        "time" : {
          "start" : 1753841304653,
          "stop" : 1753841325708,
          "duration" : 21055
        }
      }, {
        "uid" : "f64c224e10feacb6",
        "reportUrl" : "https://lambotik.github.io/Oblache/455//#testresult/f64c224e10feacb6",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 400",
        "time" : {
          "start" : 1753755822800,
          "stop" : 1753755844312,
          "duration" : 21512
        }
      }, {
        "uid" : "f905cefdb5f953f9",
        "reportUrl" : "https://lambotik.github.io/Oblache/454//#testresult/f905cefdb5f953f9",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1753668749646,
          "stop" : 1753668771063,
          "duration" : 21417
        }
      }, {
        "uid" : "2239d83c2f4e23b0",
        "reportUrl" : "https://lambotik.github.io/Oblache/453//#testresult/2239d83c2f4e23b0",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1753582886048,
          "stop" : 1753582907577,
          "duration" : 21529
        }
      }, {
        "uid" : "d84f096a561a668d",
        "reportUrl" : "https://lambotik.github.io/Oblache/452//#testresult/d84f096a561a668d",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1753495284310,
          "stop" : 1753495305202,
          "duration" : 20892
        }
      }, {
        "uid" : "7e92c93ecf748d5b",
        "reportUrl" : "https://lambotik.github.io/Oblache/451//#testresult/7e92c93ecf748d5b",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1753409123129,
          "stop" : 1753409144220,
          "duration" : 21091
        }
      }, {
        "uid" : "34e64f28362dbea6",
        "reportUrl" : "https://lambotik.github.io/Oblache/450//#testresult/34e64f28362dbea6",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1751332922116,
          "stop" : 1751332943022,
          "duration" : 20906
        }
      }, {
        "uid" : "2854897e3ac9050e",
        "reportUrl" : "https://lambotik.github.io/Oblache/449//#testresult/2854897e3ac9050e",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1751246322653,
          "stop" : 1751246343597,
          "duration" : 20944
        }
      }, {
        "uid" : "4633e66eb0afe788",
        "reportUrl" : "https://lambotik.github.io/Oblache/448//#testresult/4633e66eb0afe788",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1751160122862,
          "stop" : 1751160144095,
          "duration" : 21233
        }
      }, {
        "uid" : "1a2bd2fc5e261866",
        "reportUrl" : "https://lambotik.github.io/Oblache/447//#testresult/1a2bd2fc5e261866",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1751073117252,
          "stop" : 1751073138166,
          "duration" : 20914
        }
      }, {
        "uid" : "e57417273580c91a",
        "reportUrl" : "https://lambotik.github.io/Oblache/446//#testresult/e57417273580c91a",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1750986890620,
          "stop" : 1750986912116,
          "duration" : 21496
        }
      }, {
        "uid" : "70530fcb49360105",
        "reportUrl" : "https://lambotik.github.io/Oblache/445//#testresult/70530fcb49360105",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1750900424886,
          "stop" : 1750900445993,
          "duration" : 21107
        }
      }, {
        "uid" : "c113271cdca0db78",
        "reportUrl" : "https://lambotik.github.io/Oblache/444//#testresult/c113271cdca0db78",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1750814103522,
          "stop" : 1750814125047,
          "duration" : 21525
        }
      }, {
        "uid" : "2975e28615becfa8",
        "reportUrl" : "https://lambotik.github.io/Oblache/443//#testresult/2975e28615becfa8",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1750727659075,
          "stop" : 1750727680542,
          "duration" : 21467
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "231600a7999951b8.json",
  "parameterValues" : [ ]
}